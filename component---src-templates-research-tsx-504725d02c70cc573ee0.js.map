{"version":3,"file":"component---src-templates-research-tsx-504725d02c70cc573ee0.js","mappings":"2JAmTA,IA1QeA,IAAoC,IAAnC,OAAEC,EAAM,KAAEC,GAAmBF,EACvCG,EAAe,KACnB,MAAMC,EAAUH,EAAOI,YAAcJ,EAAOI,WAAWC,SAAS,SAC5DF,IACFD,EAAeF,EAAOM,KAAON,EAAOM,KAAO,MAE7C,IAkDIC,EAlDAC,EAAcN,EAChBO,EAAAA,cAACC,EAAAA,GAAI,CACHC,UAAU,OACVC,GAAIZ,EAAOa,OACXC,IAAK,KAAKd,EAAOa,SACjBE,GAAI,gBAAgBb,IACpB,aAAY,QAAQF,EAAOgB,iBAC3BC,MAAO,QAAQjB,EAAOgB,kBAErBhB,EAAOgB,MAGVP,EAAAA,cAAA,OAAKE,UAAU,OAAOC,GAAIZ,EAAOa,QAC9Bb,EAAOgB,MAIRE,EAAY,KAChB,GAAa,aAATjB,EAAqB,CACvB,MAAMkB,EAAOnB,EAAOO,aACpB,GAAIY,GAAQA,EAAK,GAAI,CACnB,MAAMC,EAAMD,EAAK,GAAGE,KACdC,EAAQF,EAAIE,MAChBb,EAAAA,cAAA,QAAME,UAAU,SAASS,EAAIE,OAC3B,KACEC,EAAMH,EAAIG,IAAMd,EAAAA,cAAA,QAAME,UAAU,OAAOS,EAAIG,KAAc,KAQ/D,GAPIH,EAAIE,OAASF,EAAIG,MACnBL,EACET,EAAAA,cAAA,OAAKE,UAAU,aAAY,IACvBW,EAAM,MAAUC,EAAI,MAIxBH,EAAIE,QAAUF,EAAIG,IAAK,CACzB,MAAMA,EAAMpB,EACVM,EAAAA,cAAAA,EAAAA,SAAA,KACG,IAAI,KACGA,EAAAA,cAAA,QAAME,UAAU,OAAM,YAE9B,KACJO,EACET,EAAAA,cAAA,OAAKE,UAAU,aAAY,IACvBW,EACDC,EAAI,IAGX,CACF,CACF,CAGIvB,EAAOO,eACTA,EAAeP,EAAOO,aAAaiB,KAAIL,IACrC,MAAMC,EAAMD,EAAKE,KACjB,IAAII,EAAe,KACfC,EAAqB,KACrBC,EAAc,KAyBlB,OAxBKxB,IAGQ,YAATF,GACS,aAATA,GACS,gBAATA,GACS,aAATA,IAEAwB,EAAeL,EAAIH,MACjBR,EAAAA,cAAA,QAAME,UAAU,SAASS,EAAIH,OAC3B,KACJU,EAAcP,EAAIQ,WAChBnB,EAAAA,cAAA,QAAME,UAAU,QAAQS,EAAIQ,YAC1B,KACJF,EAAqBN,EAAIS,YACvBpB,EAAAA,cAAA,QAAME,UAAU,eAAeS,EAAIS,aACjC,MAEO,mBAAT5B,IACFyB,EAAqBN,EAAIS,YACvBpB,EAAAA,cAAA,QAAME,UAAU,eAAeS,EAAIS,aACjC,OAINpB,EAAAA,cAACqB,EAAAA,SAAQ,CAAChB,IAAKM,EAAIH,OAChBQ,EACAE,EACAD,EACQ,KAKjB,IAAIK,EAAU,KACVC,EAAW,KACXC,EAAU,KACVC,EAAS,GACb,GAAa,YAATjC,GAA+B,aAATA,GAAgC,mBAATA,EAA2B,CAC1E,MAAMkC,EAAc1B,EAAAA,cAAC2B,EAAAA,EAAe,CAACC,KAAM,CAAC,MAAO,aAWnD,GAVAN,EAAU/B,EAAO+B,QACftB,EAAAA,cAAA,KACE6B,KAAM,uBAAuBtC,EAAO+B,UACpCpB,UAAU,UACV4B,OAAO,SACPC,IAAI,cAEHL,EAAY,IAAEnC,EAAO+B,SAEtB,KACA/B,EAAOgC,SAAU,CACnB,MAAMS,EAAezC,EAAOgC,SAASU,WAAW,GAE9CV,EADES,EAAaE,gBAEblC,EAAAA,cAACmC,EAAAA,EAAW,CACVC,MAAOJ,EAAaE,gBAAgBG,gBACpCC,IAAK/C,EAAOgB,KACZL,UAAU,aAKZF,EAAAA,cAAA,OACEuC,IAAKP,EAAaQ,IAClBF,IAAK,eAAe/C,EAAOgB,OAC3BL,UAAU,WACVuC,MAAO,CACLC,UAAW,WAKnBjB,EAAS,cACX,CACF,CACA,MAAMkB,EACJpD,EAAOqD,KAAOrD,EAAOqD,IAAIC,oBACvB7C,EAAAA,cAAA,KAAG6B,KAAM,IAAItC,EAAOM,OAAQK,UAAU,YAAW,YAG/C,KAEA4C,EACJvD,EAAOqD,KAAOrD,EAAOqD,IAAIC,oBACvB7C,EAAAA,cAAA,OACEE,UAAU,MACV6C,wBAAyB,CACvBC,OAAQzD,EAAOqD,IAAIC,oBAAoBI,QAI3C,GAGJ,GAAI1D,EAAOiC,QAAS,CAClB,MAAM0B,EAAc3D,EAAOiC,QAAQ2B,WAAW,QAC1C5D,EAAOiC,QACP,UAAUjC,EAAOiC,UACrBA,EACExB,EAAAA,cAAA,KAAG6B,KAAMqB,EAAapB,OAAO,SAASC,IAAI,cAAa,UAI3D,CAEA,MAAa,mBAATvC,EAGAQ,EAAAA,cAAA,OACEE,UAAW,kBAAkBuB,IAC7BtB,GAAIZ,EAAOa,OACXI,MAAOjB,EAAOgB,KACdF,IAAK,KAAKd,EAAOa,SACjBgD,SAAS,YAGTC,UAAU,6BAET9B,EACDvB,EAAAA,cAAA,OAAKE,UAAU,WACZH,EACDC,EAAAA,cAAA,OAAKE,UAAU,QAAQJ,KAKlB,aAATN,EAEAQ,EAAAA,cAAA,QACEE,UAAW,kBAAkBuB,IAC7BtB,GAAIZ,EAAOa,OACXC,IAAK,KAAKd,EAAOa,SACjBgD,SAAS,YAITC,UAAU,6BAET9B,EACDvB,EAAAA,cAAA,OAAKE,UAAU,WACZH,EACDC,EAAAA,cAAA,OAAKE,UAAU,QACZJ,EACAwB,EACAE,EACAmB,KAME,YAATnD,EAEAQ,EAAAA,cAAA,QACEE,UAAW,kBAAkBuB,IAC7BtB,GAAIZ,EAAOa,OACXC,IAAK,KAAKd,EAAOa,SACjBgD,SAAS,YAITC,UAAU,6BAET9B,EACDvB,EAAAA,cAAA,OAAKE,UAAU,WACZH,EACDC,EAAAA,cAAA,OAAKE,UAAU,QACZJ,EACAwB,EACAE,IAGJsB,GAIM,mBAATtD,GAAsC,aAATA,EAE7BQ,EAAAA,cAAA,OACEE,UAAW,UAAUuB,IACrBtB,GAAIZ,EAAOa,OACXC,IAAK,KAAKd,EAAOa,SACjBgD,SAAS,YAITC,UAAU,6BAET9B,EACDvB,EAAAA,cAAA,OAAKE,UAAU,WACZH,EACDC,EAAAA,cAAA,OAAKE,UAAU,QACZJ,EACAW,EACAa,EACAE,UAnBX,CAwBA,C,qCC3OF,IArDsBlC,IAA+C,IAA9C,WAAEgE,EAAU,KAAE9D,GAA0BF,EAC7D,MAAMkB,EACJ8C,EAAWC,OAAS,EAChB,GAAG/D,EAAKgE,OAAO,GAAGC,cAAgBjE,EAAKkE,MAAM,MAC7ClE,EAAKgE,OAAO,GAAGC,cAAgBjE,EAAKkE,MAAM,GAC1CC,EAAQ,GAAGnE,KAEjB,OACEQ,EAAAA,cAAA,OAAKE,UAAW,cAAcyD,KAC5B3D,EAAAA,cAAA,UAAKQ,GACLR,EAAAA,cAAA,UACGsD,EAAWvC,KAAI6C,IACd,MAAMC,EAAID,EAAGhD,KACPkD,EACO,WAAXD,EAAEhE,MAAgC,aAAXgE,EAAErE,KACrB,0BACA,GACAuE,EAAiBF,EAAErC,QACvBqC,EAAErC,QAAQ2B,WAAW,QACnBnD,EAAAA,cAAA,KACE6B,KAAMgC,EAAErC,QACRhB,MAAOqD,EAAEtD,KACTuB,OAAO,SACPC,IAAI,cAEH+B,EACAD,EAAEtD,MAGLP,EAAAA,cAAA,KACE6B,KAAM,UAAUgC,EAAErC,UAClBhB,MAAOqD,EAAEtD,KACTuB,OAAO,SACPC,IAAI,cAEH+B,EACAD,EAAEtD,MAIPsD,EAAEtD,KAEJ,OACEP,EAAAA,cAAA,MAAIG,GAAI0D,EAAEhE,KAAMK,UAAW2D,EAAErE,KAAKwE,eAC/BD,EACE,KAIP,C,4HC+NV,UAlPiBzE,IAA0C,IAErD2E,GAFcC,YAAaC,GAAqB7E,EAChD8E,EAASpE,EAAAA,cAAA,MAAIE,UAAU,SAASiE,EAAK3D,OAEzC,MAAM6D,EAAMF,EAAK/B,MACU,IAAAkC,EAAAC,EASLC,EATlBH,GAAOA,EAAIpC,aACbmC,EACEpE,EAAAA,cAACmC,EAAAA,EAAW,CACVC,MAAwB,QAAnBkC,EAAED,EAAIpC,WAAW,UAAE,IAAAqC,GAAiB,QAAjBC,EAAjBD,EAAmBpC,uBAAe,IAAAqC,OAAjB,EAAjBA,EAAoClC,gBAC3CC,IAAK6B,EAAK3D,OAAS,GACnBN,UAAU,oBAIZiE,EAAKF,cACPA,EACEjE,EAAAA,cAAA,OACEE,UAAU,cACV6C,wBAAyB,CACvBC,QAA4C,QAApCwB,EAAAL,EAAKF,YAAYpB,2BAAmB,IAAA2B,OAAA,EAApCA,EAAsCvB,OAAQ,OAa9D,IAAIwB,EAAmB,KACnBC,EAAe,KACfP,EAAKO,eACPD,EAAmBN,EAAKO,aAAa3D,KAAI,CAAC4D,EAAGC,IAEzC5E,EAAAA,cAAC6E,EAAAA,EAAM,CACLxE,IAAK,IAAIuE,IACTrF,OAAQoF,EAAE/D,KACVpB,KAAK,kBAIXkF,EACE1E,EAAAA,cAAA,OAAKE,UAAU,gBACbF,EAAAA,cAAA,UAAI,gBACJA,EAAAA,cAAA,UAAKyE,KAKX,IAAIK,EAAgB,KAChBC,EAAY,KAChB,GAAIZ,EAAKY,UAAW,CAClB,MAAMC,EAAkBb,EAAKY,UAAUxB,OAAS,EAAI,YAAc,WAClEuB,EAAgBX,EAAKY,UAAUhE,KAAIxB,GAE/BS,EAAAA,cAAC6E,EAAAA,EAAM,CACLtF,OAAQA,EAAOqB,KACfpB,KAAK,eAIXuF,EACE/E,EAAAA,cAAA,OAAKE,UAAU,aACbF,EAAAA,cAAA,UAAKgF,GACLhF,EAAAA,cAAA,UAAK8E,GAGX,CAEA,IAAIxD,EAAU,KACd,GAAI6C,EAAKc,gBAAiB,CACxB,MAAMvD,EAAc1B,EAAAA,cAAC2B,EAAAA,EAAe,CAACC,KAAM,CAAC,MAAO,aAC7CsD,EAAef,EAAKc,gBACxBjF,EAAAA,cAAA,QAAME,UAAU,gBACdF,EAAAA,cAAA,KACE6B,KAAM,uBAAuBsC,EAAKc,kBAClCnD,OAAO,SACPC,IAAI,cAEHoC,EAAKc,kBAGR,KAKJ3D,EACEtB,EAAAA,cAAA,OAAKE,UAAU,WACZwB,EAAY,IAAEwD,EAGrB,CAEA,IAAIC,EAAa,KACbC,EAAQ,KACRC,EAAW,KACXlB,EAAKmB,eACPH,EAAahB,EAAKmB,aAAavE,KAAIwE,IAAM,IAAAC,EACvC,MAAMC,EAAIF,aAAE,EAAFA,EAAI3E,KAEd,OADAyE,EAAgB,QAALG,EAAAC,EAAEjD,WAAG,IAAAgD,GAALA,EAAOrC,WAAW,QAAUsC,EAAEjD,IAAM,UAAUiD,EAAEjD,MAEzDxC,EAAAA,cAAA,MAAIG,GAAIsF,EAAEjF,OAAS,IACjBR,EAAAA,cAAA,KACE6B,KAAMwD,EACN7E,MAAOiF,EAAEjF,OAAS,GAClBsB,OAAO,SACPC,IAAI,cAEH0D,EAAEjF,OAEF,IAGT4E,EACEpF,EAAAA,cAAA,OAAKE,UAAU,SACbF,EAAAA,cAAA,UAAI,SACJA,EAAAA,cAAA,UAAKmF,KAKX,MAAMO,EACJvB,EAAKwB,iBAAmBxB,EAAKwB,gBAAgBpC,OAAS,EACpDvD,EAAAA,cAAC4F,EAAAA,EAAa,CACZtC,WAAYa,EAAKwB,gBACjBnG,KAAK,YAGP,GAEEqG,EACJ1B,EAAK2B,iBAAmB3B,EAAK2B,gBAAgBvC,OAAS,EACpDvD,EAAAA,cAAC4F,EAAAA,EAAa,CACZtC,WAAYa,EAAK2B,gBACjBtG,KAAK,YAGP,GAGJ,IAAIuG,EAAc,KACdC,EAAS,KACT7B,EAAK8B,gBACPF,EAAc5B,EAAK8B,cAAclF,KAAImF,IACnC,MAAMC,EAAID,aAAE,EAAFA,EAAItF,KACd,OACEZ,EAAAA,cAAA,MAAIG,GAAIgG,EAAEhG,GAAKD,UAAU,SACvBF,EAAAA,cAAA,MAAIE,UAAU,SACZF,EAAAA,cAACC,EAAAA,GAAI,CAACI,IAAK,KAAK8F,EAAEhG,KAAMG,GAAI,gBAAgB6F,EAAEhG,MAC3CgG,EAAEC,YAAcD,EAAEE,cAGvBrG,EAAAA,cAACsG,EAAAA,EAAS,CACRzF,MAAO0F,SAASJ,EAAEK,YAClB1F,IAAKyF,SAASJ,EAAEM,YAElBzG,EAAAA,cAAA,OAAKoD,SAAS,WAAWlD,UAAU,YAChCiG,EAAEO,UAEL1G,EAAAA,cAAA,OAAKE,UAAU,gBACfF,EAAAA,cAACC,EAAAA,GAAI,CACHC,UAAU,SACVG,IAAK,KAAK8F,EAAEhG,KACZG,GAAI,gBAAgB6F,EAAEhG,MACvB,sBAGE,IAGT6F,EACEhG,EAAAA,cAAA,OAAKE,UAAU,UACbF,EAAAA,cAAA,UAAI,UACJA,EAAAA,cAAA,UAAK+F,KAKX,IAAIY,EAAY,KACZC,EAAO,KAkCX,OAjCIzC,EAAK0C,eACPF,EAAYxC,EAAK0C,aAAa9F,KAAI+F,IAAM,IAAAC,EACtC,MAAMC,EAAIF,aAAE,EAAFA,EAAIlG,KACd,OACEZ,EAAAA,cAAA,MAAIG,GAAU,QAAR4G,EAAEC,EAAEnH,YAAI,IAAAkH,OAAA,EAANA,EAAQ/C,cAAciD,QAAQ,KAAM,MAC1CjH,EAAAA,cAAA,OAAKE,UAAU,cACbF,EAAAA,cAACC,EAAAA,GAAI,CAACI,IAAK,KAAK2G,EAAEnH,MAAQ,KAAMS,GAAI,cAAc0G,EAAEnH,QACjDmH,EAAEE,aAGPlH,EAAAA,cAAA,OAAKE,UAAU,QACbF,EAAAA,cAAA,QAAME,UAAU,aAAa8G,EAAEG,WAC/BnH,EAAAA,cAAA,OAAKE,UAAU,iBAAiB8G,EAAEI,cAEjC,IAGTR,EACE5G,EAAAA,cAAA,OAAKE,UAAU,QACbF,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAAA,UAAK2G,KAcT3G,EAAAA,cAACqH,EAAAA,EAAM,KACLrH,EAAAA,cAACsH,EAAAA,EAAG,CAAC9G,MAAO2D,EAAK3D,OAAS,KAC1BR,EAAAA,cAAA,OAAKE,UAAU,sBACbF,EAAAA,cAAA,WAASE,UAAU,iBAChBkE,EACDpE,EAAAA,cAAA,OAAKE,UAAU,WACZ+D,EACA+B,GAEHhG,EAAAA,cAAA,OAAKE,UAAU,oBAEZoB,EACAyD,EACAL,EACAU,EACAwB,EACAf,EACAH,KAIA,C","sources":["webpack://mith-static/./src/components/person.tsx","webpack://mith-static/./src/components/supporter-list.tsx","webpack://mith-static/./src/templates/research.tsx"],"sourcesContent":["import React, { Fragment } from \"react\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport type { IGatsbyImageData } from \"gatsby-plugin-image\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nexport type PersonComponentProps = {\n  group_type: string\n  slug: string\n  new_id: string\n  name: string\n  affiliations: {\n    data: {\n      start: number\n      end: number\n      title: string\n      department: string\n      institution: string\n    }\n  }[]\n  twitter: string\n  website: string\n  bio: {\n    childMarkdownRemark: { html: string }\n  }\n  headshot: {\n    localFiles: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n      url: string\n    }[]\n  }\n}\n\ninterface PersonProps {\n  person: PersonComponentProps\n  type: string\n}\n\nconst Person = ({ person, type }: PersonProps) => {\n  let pageLocation = null\n  const isStaff = person.group_type && person.group_type.includes(\"Staff\")\n  if (isStaff) {\n    pageLocation = person.slug ? person.slug : null\n  }\n  let person_name = pageLocation ? ( // link current staff names to profile\n    <Link\n      className=\"name\"\n      id={person.new_id}\n      key={`p-${person.new_id}`}\n      to={`../../people/${pageLocation}`}\n      aria-label={`View ${person.name}'s Profile`}\n      title={`View ${person.name}'s Profile`}\n    >\n      {person.name}\n    </Link>\n  ) : (\n    <div className=\"name\" id={person.new_id}>\n      {person.name}\n    </div>\n  )\n\n  let date_span = null\n  if (type === \"director\") {\n    const _aff = person.affiliations\n    if (_aff && _aff[0]) {\n      const aff = _aff[0].data\n      const start = aff.start ? (\n        <span className=\"start\">{aff.start}</span>\n      ) : null\n      const end = aff.end ? <span className=\"end\">{aff.end}</span> : null\n      if (aff.start && aff.end) {\n        date_span = (\n          <div className=\"date-span\">\n            ({start} &ndash; {end})\n          </div>\n        )\n      }\n      if (aff.start && !aff.end) {\n        const end = isStaff ? (\n          <>\n            {\" \"}\n            &ndash; <span className=\"end\">present</span>\n          </>\n        ) : null\n        date_span = (\n          <div className=\"date-span\">\n            ({start}\n            {end})\n          </div>\n        )\n      }\n    }\n  }\n\n  let affiliations: JSX.Element[] | undefined\n  if (person.affiliations) {\n    affiliations = person.affiliations.map(_aff => {\n      const aff = _aff.data\n      let person_title = null\n      let person_institution = null\n      let person_dept = null\n      if (!isStaff) {\n        // hide titles for current staff\n        if (\n          type === \"speaker\" ||\n          type === \"dialogue\" ||\n          type === \"participant\" ||\n          type === \"director\"\n        ) {\n          person_title = aff.title ? (\n            <span className=\"title\">{aff.title}</span>\n          ) : null\n          person_dept = aff.department ? (\n            <span className=\"dept\">{aff.department}</span>\n          ) : null\n          person_institution = aff.institution ? (\n            <span className=\"institution\">{aff.institution}</span>\n          ) : null\n        }\n        if (type === \"dialogue-index\") {\n          person_institution = aff.institution ? (\n            <span className=\"institution\">{aff.institution}</span>\n          ) : null\n        }\n      }\n      return (\n        <Fragment key={aff.title}>\n          {person_title}\n          {person_dept}\n          {person_institution}\n        </Fragment>\n      )\n    })\n  }\n\n  let twitter = null\n  let headshot = null\n  let website = null\n  let hasImg = \"\"\n  if (type === \"speaker\" || type === \"dialogue\" || type === \"dialogue-index\") {\n    const iconTwitter = <FontAwesomeIcon icon={[\"fab\", \"twitter\"]} />\n    twitter = person.twitter ? (\n      <a\n        href={`https://twitter.com/${person.twitter}`}\n        className=\"twitter\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        {iconTwitter} {person.twitter}\n      </a>\n    ) : null\n    if (person.headshot) {\n      const headshotData = person.headshot.localFiles[0]\n      if (headshotData.childImageSharp) {\n        headshot = (\n          <GatsbyImage\n            image={headshotData.childImageSharp.gatsbyImageData}\n            alt={person.name}\n            className=\"headshot\"\n          />\n        )\n      } else {\n        headshot = (\n          <img\n            src={headshotData.url}\n            alt={`Headshot of ${person.name}`}\n            className=\"headshot\"\n            style={{\n              objectFit: \"cover\",\n            }}\n          />\n        )\n      }\n      hasImg = \"has-headshot\"\n    }\n  }\n  const bio_link =\n    person.bio && person.bio.childMarkdownRemark ? (\n      <a href={`#${person.slug}`} className=\"bio-link\">\n        Read Bio\n      </a>\n    ) : null\n\n  const person_bio =\n    person.bio && person.bio.childMarkdownRemark ? (\n      <div\n        className=\"bio\"\n        dangerouslySetInnerHTML={{\n          __html: person.bio.childMarkdownRemark.html,\n        }}\n      />\n    ) : (\n      \"\"\n    )\n\n  if (person.website) {\n    const website_url = person.website.startsWith(\"http\")\n      ? person.website\n      : `http://${person.website}`\n    website = (\n      <a href={website_url} target=\"_blank\" rel=\"noreferrer\">\n        Website\n      </a>\n    )\n  }\n\n  if (type === \"dialogue-index\") {\n    // TODO: default typing for itemScope is boolean | undefined, which is incorrect.\n    return (\n      <div\n        className={`speaker person ${hasImg}`}\n        id={person.new_id}\n        title={person.name}\n        key={`p-${person.new_id}`}\n        itemProp=\"performer\"\n        // @ts-expect-error\n        // ^~~~~~~~~~~~~~~^ error: \"Type 'string' is not assignable to type 'boolean | undefined' (2322)\"\n        itemScope=\"https://schema.org/Person\"\n      >\n        {headshot}\n        <div className=\"details\">\n          {person_name}\n          <div className=\"info\">{affiliations}</div>\n        </div>\n      </div>\n    )\n  }\n  if (type === \"dialogue\") {\n    return (\n      <span\n        className={`speaker person ${hasImg}`}\n        id={person.new_id}\n        key={`p-${person.new_id}`}\n        itemProp=\"performer\"\n        // @ts-expect-error\n        // ^~~~~~~~~~~~~~~^ error: \"Type 'string' is not assignable to type 'boolean | undefined' (2322)\"\n\n        itemScope=\"https://schema.org/Person\"\n      >\n        {headshot}\n        <div className=\"details\">\n          {person_name}\n          <div className=\"info\">\n            {affiliations}\n            {twitter}\n            {website}\n            {bio_link}\n          </div>\n        </div>\n      </span>\n    )\n  }\n  if (type === \"speaker\") {\n    return (\n      <span\n        className={`speaker person ${hasImg}`}\n        id={person.new_id}\n        key={`p-${person.new_id}`}\n        itemProp=\"performer\"\n        // @ts-expect-error\n        // ^~~~~~~~~~~~~~~^ error: \"Type 'string' is not assignable to type 'boolean | undefined' (2322)\"\n\n        itemScope=\"https://schema.org/Person\"\n      >\n        {headshot}\n        <div className=\"details\">\n          {person_name}\n          <div className=\"info\">\n            {affiliations}\n            {twitter}\n            {website}\n          </div>\n        </div>\n        {person_bio}\n      </span>\n    )\n  }\n  if (type !== \"dialogue-index\" && type !== \"dialogue\") {\n    return (\n      <div\n        className={`person ${hasImg}`}\n        id={person.new_id}\n        key={`p-${person.new_id}`}\n        itemProp=\"performer\"\n        // @ts-expect-error\n        // ^~~~~~~~~~~~~~~^ error: \"Type 'string' is not assignable to type 'boolean | undefined' (2322)\"\n\n        itemScope=\"https://schema.org/Person\"\n      >\n        {headshot}\n        <div className=\"details\">\n          {person_name}\n          <div className=\"info\">\n            {affiliations}\n            {date_span}\n            {twitter}\n            {website}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Person\n","import React from \"react\"\n\nexport type SupporterComponentProps = {\n  data: {\n    website: string\n    name: string\n    slug: string\n    type: string\n  }\n}[]\n\ninterface SupporterListProps {\n  supporters: SupporterComponentProps\n  type: string\n}\n\nconst SupporterList = ({ supporters, type }: SupporterListProps) => {\n  const title =\n    supporters.length > 1\n      ? `${type.charAt(0).toUpperCase() + type.slice(1)}s`\n      : type.charAt(0).toUpperCase() + type.slice(1)\n  const types = `${type}s`\n\n  return (\n    <div className={`supporters ${types}`}>\n      <h2>{title}</h2>\n      <ul>\n        {supporters.map(_s => {\n          const s = _s.data\n          const umd =\n            s.slug !== \"umdlib\" && s.type === \"Internal\"\n              ? \"University of Maryland \"\n              : \"\"\n          const supporter_name = s.website ? (\n            s.website.startsWith(\"http\") ? (\n              <a\n                href={s.website}\n                title={s.name}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {umd}\n                {s.name}\n              </a>\n            ) : (\n              <a\n                href={`http://${s.website}`}\n                title={s.name}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {umd}\n                {s.name}\n              </a>\n            )\n          ) : (\n            s.name\n          )\n          return (\n            <li id={s.slug} className={s.type.toLowerCase()}>\n              {supporter_name}\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default SupporterList\n\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n// import ResearchTime from '../components/research-time'\nimport EventTime from \"../components/event-time\"\nimport Person, { PersonComponentProps } from \"../components/person\"\n// import TaxonomyList from '../components/taxonomy-list'\nimport SupporterList, {\n  SupporterComponentProps,\n} from \"../components/supporter-list\"\n\nimport \"./research.css\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\n// TODO: simplify / aggregate with types on gastby-node\ntype Affiliation =\n  | NonNullable<\n      NonNullable<\n        Queries.PageResearchQuery[\"allAirtableResearchItems\"][\"nodes\"][number][\"data\"]\n      >[\"linked_internal_participant_affiliations\"]\n    >[number]\n  | NonNullable<\n      NonNullable<\n        Queries.PageResearchQuery[\"allAirtableResearchItems\"][\"nodes\"][number][\"data\"]\n      >[\"linked_external_participant_affiliations\"]\n    >[number]\ntype ExtendedLinkedParticipant = NonNullable<\n  NonNullable<\n    Queries.PageResearchQuery[\"allAirtableResearchItems\"][\"nodes\"][number][\"data\"]\n  >[\"linked_participants\"]\n>[number] & {\n  affiliations?: Affiliation[]\n}\ntype ExtendedPageResearchQuery =\n  Queries.PageResearchQuery[\"allAirtableResearchItems\"][\"nodes\"][number][\"data\"] & {\n    participants?: ExtendedLinkedParticipant[]\n    directors?: ExtendedLinkedParticipant[]\n  }\n\ninterface ResearchProps {\n  pageContext: ExtendedPageResearchQuery\n}\n\nconst Research = ({ pageContext: item }: ResearchProps) => {\n  let header = <h1 className=\"title\">{item.title}</h1>\n  let description: JSX.Element | undefined\n  const img = item.image\n  if (img && img.localFiles) {\n    header = (\n      <GatsbyImage\n        image={img.localFiles[0]?.childImageSharp?.gatsbyImageData!}\n        alt={item.title || \"\"}\n        className=\"research-image\"\n      />\n    )\n  }\n  if (item.description) {\n    description = (\n      <div\n        className=\"description\"\n        dangerouslySetInnerHTML={{\n          __html: item.description.childMarkdownRemark?.html || \"\",\n        }}\n      />\n    )\n  }\n\n  // const start = item.month_start ? `${item.year_start}-${item.month_start}` : item.year_start\n  // let end: string | number\n  // if (item.year_end) {\n  //   end = item.month_end ? `${item.year_end}-${item.month_end}` : item.year_end\n  // }\n  // const dates = <ResearchTime start={start} end={end} active={item.active} />\n\n  let participant_list = null\n  let participants = null\n  if (item.participants) {\n    participant_list = item.participants.map((p, i) => {\n      return (\n        <Person\n          key={`p${i}`}\n          person={p.data as unknown as PersonComponentProps}\n          type=\"participant\"\n        />\n      )\n    })\n    participants = (\n      <div className=\"participants\">\n        <h2>Participants</h2>\n        <ul>{participant_list}</ul>\n      </div>\n    )\n  }\n\n  let director_list = null\n  let directors = null\n  if (item.directors) {\n    const directors_title = item.directors.length > 1 ? \"Directors\" : \"Director\"\n    director_list = item.directors.map(person => {\n      return (\n        <Person\n          person={person.data as unknown as PersonComponentProps}\n          type=\"director\"\n        />\n      )\n    })\n    directors = (\n      <div className=\"directors\">\n        <h2>{directors_title}</h2>\n        <ul>{director_list}</ul>\n      </div>\n    )\n  }\n\n  let twitter = null\n  if (item.twitter_account) {\n    const iconTwitter = <FontAwesomeIcon icon={[\"fab\", \"twitter\"]} />\n    const twitter_acct = item.twitter_account ? (\n      <span className=\"twitter_acct\">\n        <a\n          href={`https://twitter.com/${item.twitter_account}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {item.twitter_account}\n        </a>\n      </span>\n    ) : null\n    // const twitter_hash = item.twitter_hashtag\n    //   ? <span className=\"twitter_hash\">\n    //     <a href={`https://twitter.com/hashtag/${item.twitter_hashtag}`} target=\"_blank\" rel=\"noreferrer\">#{item.twitter_hashtag}</a>\n    //   </span> : null\n    twitter = (\n      <div className=\"twitter\">\n        {iconTwitter} {twitter_acct}\n      </div>\n    )\n  }\n\n  let links_list = null\n  let links = null\n  let link_url = null\n  if (item.linked_links) {\n    links_list = item.linked_links.map(_l => {\n      const l = _l?.data!\n      link_url = l.url?.startsWith(\"http\") ? l.url : `http://${l.url}`\n      return (\n        <li id={l.title || \"\"}>\n          <a\n            href={link_url}\n            title={l.title || \"\"}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            {l.title}\n          </a>\n        </li>\n      )\n    })\n    links = (\n      <div className=\"links\">\n        <h2>Links</h2>\n        <ul>{links_list}</ul>\n      </div>\n    )\n  }\n\n  const sponsors =\n    item.linked_sponsors && item.linked_sponsors.length > 0 ? (\n      <SupporterList\n        supporters={item.linked_sponsors as SupporterComponentProps}\n        type=\"sponsor\"\n      />\n    ) : (\n      \"\"\n    )\n  const partners =\n    item.linked_partners && item.linked_partners.length > 0 ? (\n      <SupporterList\n        supporters={item.linked_partners as SupporterComponentProps}\n        type=\"partner\"\n      />\n    ) : (\n      \"\"\n    )\n\n  let events_list = null\n  let events = null\n  if (item.linked_events) {\n    events_list = item.linked_events.map(_e => {\n      const e = _e?.data!\n      return (\n        <li id={e.id!} className=\"event\">\n          <h3 className=\"title\">\n            <Link key={`e-${e.id}`} to={`../../events/${e.id}`}>\n              {e.talk_title || e.event_title}\n            </Link>\n          </h3>\n          <EventTime\n            start={parseInt(e.start_date!)}\n            end={parseInt(e.end_date!)}\n          />\n          <div itemProp=\"location\" className=\"location\">\n            {e.location}\n          </div>\n          <div className=\"description\"></div>\n          <Link\n            className=\"button\"\n            key={`e-${e.id}`}\n            to={`../../events/${e.id}`}\n          >\n            View Event Details\n          </Link>\n        </li>\n      )\n    })\n    events = (\n      <div className=\"events\">\n        <h2>Events</h2>\n        <ul>{events_list}</ul>\n      </div>\n    )\n  }\n\n  let news_list = null\n  let news = null\n  if (item.linked_posts) {\n    news_list = item.linked_posts.map(_n => {\n      const n = _n?.data!\n      return (\n        <li id={n.slug?.toLowerCase().replace(/-/g, \"_\")}>\n          <div className=\"post-title\">\n            <Link key={`n-${n.slug || \"\"}`} to={`../../news/${n.slug}`}>\n              {n.post_title}\n            </Link>\n          </div>\n          <div className=\"meta\">\n            <time className=\"post-date\">{n.post_date}</time>\n            <div className=\"author hidden\">{n.author_name}</div>\n          </div>\n        </li>\n      )\n    })\n    news = (\n      <div className=\"news\">\n        <h2>News</h2>\n        <ul>{news_list}</ul>\n      </div>\n    )\n  }\n\n  // const disciplines = item.disciplines\n  // ? <TaxonomyList terms={item.disciplines} type=\"disciplines\" />\n  // : ''\n\n  // const methods = item.methods\n  // ? <TaxonomyList terms={item.methods} type=\"methods\" />\n  // : ''\n\n  return (\n    <Layout>\n      <SEO title={item.title || \"\"} />\n      <div className=\"page-research-item\">\n        <section className=\"research-item\">\n          {header}\n          <div className=\"content\">\n            {description}\n            {events}\n          </div>\n          <div className=\"sidebar metadata\">\n            {/* {dates} */}\n            {twitter}\n            {directors}\n            {participants}\n            {links}\n            {news}\n            {partners}\n            {sponsors}\n          </div>\n        </section>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Research\n"],"names":["_ref","person","type","pageLocation","isStaff","group_type","includes","slug","affiliations","person_name","React","Link","className","id","new_id","key","to","name","title","date_span","_aff","aff","data","start","end","map","person_title","person_institution","person_dept","department","institution","Fragment","twitter","headshot","website","hasImg","iconTwitter","FontAwesomeIcon","icon","href","target","rel","headshotData","localFiles","childImageSharp","GatsbyImage","image","gatsbyImageData","alt","src","url","style","objectFit","bio_link","bio","childMarkdownRemark","person_bio","dangerouslySetInnerHTML","__html","html","website_url","startsWith","itemProp","itemScope","supporters","length","charAt","toUpperCase","slice","types","_s","s","umd","supporter_name","toLowerCase","description","pageContext","item","header","img","_img$localFiles$","_img$localFiles$$chil","_item$description$chi","participant_list","participants","p","i","Person","director_list","directors","directors_title","twitter_account","twitter_acct","links_list","links","link_url","linked_links","_l","_l$url","l","sponsors","linked_sponsors","SupporterList","partners","linked_partners","events_list","events","linked_events","_e","e","talk_title","event_title","EventTime","parseInt","start_date","end_date","location","news_list","news","linked_posts","_n","_n$slug","n","replace","post_title","post_date","author_name","Layout","SEO"],"sourceRoot":""}