{"version":3,"file":"component---src-templates-dialogue-index-tsx-157bef858c5cb23f8472.js","mappings":"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","sources":["webpack://mith-static/./src/components/paginator.tsx","webpack://mith-static/./src/components/person.tsx","webpack://mith-static/./src/templates/dialogue-index.tsx"],"sourcesContent":["import { Link } from \"gatsby\"\nimport React from \"react\"\n\nimport \"./paginator.css\"\n\ninterface PaginatorProps {\n  count: number\n  path: string\n}\n\nconst Paginator = ({ count, path }: PaginatorProps) => {\n  return (\n    <section className=\"pagination-wrap\">\n      <ul className=\"pagination\">\n        {Array.from({ length: count }, (_, i) => (\n          <li className=\"page-link\" key={`pa${i}`}>\n            <Link\n              activeClassName=\"active\"\n              className=\"page-link\"\n              key={`pagination-number${i + 1}`}\n              to={`/${path}/${i === 0 ? \"\" : i + 1}`}\n            >\n              {i + 1}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Paginator\n\n","import React, { Fragment } from \"react\"\nimport { Link } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport type { IGatsbyImageData } from \"gatsby-plugin-image\"\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nexport type PersonComponentProps = {\n  group_type: string\n  slug: string\n  new_id: string\n  name: string\n  affiliations: {\n    data: {\n      start: number\n      end: number\n      title: string\n      department: string\n      institution: string\n    }\n  }[]\n  twitter: string\n  website: string\n  bio: {\n    childMarkdownRemark: { html: string }\n  }\n  headshot: {\n    localFiles: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n      url: string\n    }[]\n  }\n}\n\ninterface PersonProps {\n  person: PersonComponentProps\n  type: string\n}\n\nconst Person = ({ person, type }: PersonProps) => {\n  let pageLocation = null\n  const isStaff = person.group_type && person.group_type.includes(\"Staff\")\n  if (isStaff) {\n    pageLocation = person.slug ? person.slug : null\n  }\n  let person_name = pageLocation ? ( // link current staff names to profile\n    <Link\n      className=\"name\"\n      id={person.new_id}\n      key={`p-${person.new_id}`}\n      to={`../../people/${pageLocation}`}\n      aria-label={`View ${person.name}'s Profile`}\n      title={`View ${person.name}'s Profile`}\n    >\n      {person.name}\n    </Link>\n  ) : (\n    <div className=\"name\" id={person.new_id}>\n      {person.name}\n    </div>\n  )\n\n  let date_span = null\n  if (type === \"director\") {\n    const _aff = person.affiliations\n    if (_aff && _aff[0]) {\n      const aff = _aff[0].data\n      const start = aff.start ? (\n        <span className=\"start\">{aff.start}</span>\n      ) : null\n      const end = aff.end ? <span className=\"end\">{aff.end}</span> : null\n      if (aff.start && aff.end) {\n        date_span = (\n          <div className=\"date-span\">\n            ({start} &ndash; {end})\n          </div>\n        )\n      }\n      if (aff.start && !aff.end) {\n        const end = isStaff ? (\n          <>\n            {\" \"}\n            &ndash; <span className=\"end\">present</span>\n          </>\n        ) : null\n        date_span = (\n          <div className=\"date-span\">\n            ({start}\n            {end})\n          </div>\n        )\n      }\n    }\n  }\n\n  let affiliations: JSX.Element[] | undefined\n  if (person.affiliations) {\n    affiliations = person.affiliations.map(_aff => {\n      const aff = _aff.data\n      let person_title = null\n      let person_institution = null\n      let person_dept = null\n      if (!isStaff) {\n        // hide titles for current staff\n        if (\n          type === \"speaker\" ||\n          type === \"dialogue\" ||\n          type === \"participant\" ||\n          type === \"director\"\n        ) {\n          person_title = aff.title ? (\n            <span className=\"title\">{aff.title}</span>\n          ) : null\n          person_dept = aff.department ? (\n            <span className=\"dept\">{aff.department}</span>\n          ) : null\n          person_institution = aff.institution ? (\n            <span className=\"institution\">{aff.institution}</span>\n          ) : null\n        }\n        if (type === \"dialogue-index\") {\n          person_institution = aff.institution ? (\n            <span className=\"institution\">{aff.institution}</span>\n          ) : null\n        }\n      }\n      return (\n        <Fragment key={aff.title}>\n          {person_title}\n          {person_dept}\n          {person_institution}\n        </Fragment>\n      )\n    })\n  }\n\n  let twitter = null\n  let headshot = null\n  let website = null\n  let hasImg = \"\"\n  if (type === \"speaker\" || type === \"dialogue\" || type === \"dialogue-index\") {\n    const iconTwitter = <FontAwesomeIcon icon={[\"fab\", \"twitter\"]} />\n    twitter = person.twitter ? (\n      <a\n        href={`https://twitter.com/${person.twitter}`}\n        className=\"twitter\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        {iconTwitter} {person.twitter}\n      </a>\n    ) : null\n    if (person.headshot) {\n      const headshotData = person.headshot.localFiles[0]\n      if (headshotData.childImageSharp) {\n        headshot = (\n          <GatsbyImage\n            image={headshotData.childImageSharp.gatsbyImageData}\n            alt={person.name}\n            className=\"headshot\"\n          />\n        )\n      } else {\n        headshot = (\n          <img\n            src={headshotData.url}\n            alt={`Headshot of ${person.name}`}\n            className=\"headshot\"\n            style={{\n              objectFit: \"cover\",\n            }}\n          />\n        )\n      }\n      hasImg = \"has-headshot\"\n    }\n  }\n  const bio_link =\n    person.bio && person.bio.childMarkdownRemark ? (\n      <a href={`#${person.slug}`} className=\"bio-link\">\n        Read Bio\n      </a>\n    ) : null\n\n  const person_bio =\n    person.bio && person.bio.childMarkdownRemark ? (\n      <div\n        className=\"bio\"\n        dangerouslySetInnerHTML={{\n          __html: person.bio.childMarkdownRemark.html,\n        }}\n      />\n    ) : (\n      \"\"\n    )\n\n  if (person.website) {\n    const website_url = person.website.startsWith(\"http\")\n      ? person.website\n      : `http://${person.website}`\n    website = (\n      <a href={website_url} target=\"_blank\" rel=\"noreferrer\">\n        Website\n      </a>\n    )\n  }\n\n  if (type === \"dialogue-index\") {\n    // TODO: default typing for itemScope is boolean | undefined, which is incorrect.\n    return (\n      <div\n        className={`speaker person ${hasImg}`}\n        id={person.new_id}\n        title={person.name}\n        key={`p-${person.new_id}`}\n        itemProp=\"performer\"\n        // @ts-expect-error\n        // ^~~~~~~~~~~~~~~^ error: \"Type 'string' is not assignable to type 'boolean | undefined' (2322)\"\n        itemScope=\"https://schema.org/Person\"\n      >\n        {headshot}\n        <div className=\"details\">\n          {person_name}\n          <div className=\"info\">{affiliations}</div>\n        </div>\n      </div>\n    )\n  }\n  if (type === \"dialogue\") {\n    return (\n      <span\n        className={`speaker person ${hasImg}`}\n        id={person.new_id}\n        key={`p-${person.new_id}`}\n        itemProp=\"performer\"\n        // @ts-expect-error\n        // ^~~~~~~~~~~~~~~^ error: \"Type 'string' is not assignable to type 'boolean | undefined' (2322)\"\n\n        itemScope=\"https://schema.org/Person\"\n      >\n        {headshot}\n        <div className=\"details\">\n          {person_name}\n          <div className=\"info\">\n            {affiliations}\n            {twitter}\n            {website}\n            {bio_link}\n          </div>\n        </div>\n      </span>\n    )\n  }\n  if (type === \"speaker\") {\n    return (\n      <span\n        className={`speaker person ${hasImg}`}\n        id={person.new_id}\n        key={`p-${person.new_id}`}\n        itemProp=\"performer\"\n        // @ts-expect-error\n        // ^~~~~~~~~~~~~~~^ error: \"Type 'string' is not assignable to type 'boolean | undefined' (2322)\"\n\n        itemScope=\"https://schema.org/Person\"\n      >\n        {headshot}\n        <div className=\"details\">\n          {person_name}\n          <div className=\"info\">\n            {affiliations}\n            {twitter}\n            {website}\n          </div>\n        </div>\n        {person_bio}\n      </span>\n    )\n  }\n  if (type !== \"dialogue-index\" && type !== \"dialogue\") {\n    return (\n      <div\n        className={`person ${hasImg}`}\n        id={person.new_id}\n        key={`p-${person.new_id}`}\n        itemProp=\"performer\"\n        // @ts-expect-error\n        // ^~~~~~~~~~~~~~~^ error: \"Type 'string' is not assignable to type 'boolean | undefined' (2322)\"\n\n        itemScope=\"https://schema.org/Person\"\n      >\n        {headshot}\n        <div className=\"details\">\n          {person_name}\n          <div className=\"info\">\n            {affiliations}\n            {date_span}\n            {twitter}\n            {website}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Person\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Paginator from \"../components/paginator\"\nimport SEO from \"../components/seo\"\nimport EventTime from \"../components/event-time\"\nimport Person from \"../components/person\"\n\nimport \"./event-index.css\"\n\nimport type { PersonComponentProps } from \"../components/person\"\n\ntype Headshot = NonNullable<\n  Queries.PageDialogueIndexQuery[\"allAirtablePeople\"][\"nodes\"][number][\"data\"]\n>[\"headshot\"]\ntype ExtendedSpeaker = NonNullable<\n  NonNullable<\n    NonNullable<\n      Queries.DialoguesQuery[\"allAirtableEvents\"][\"nodes\"][number][\"data\"]\n    >[\"speakers\"]\n  >[number]\n>[\"data\"] & {\n  headshot: Headshot\n}\n\ninterface EntryProps {\n  item: NonNullable<\n    Queries.DialoguesQuery[\"allAirtableEvents\"][\"nodes\"][number][\"data\"]\n  >\n  headshots: {\n    [key: string]: Headshot\n  }\n}\n\nconst Entry = ({ item, headshots }: EntryProps) => {\n  const slug = \"/digital-dialogues/\" + item.id + \"/\"\n\n  const event_title = item.event_title\n  const talk_title = item.talk_title\n  const title_text = talk_title ? talk_title : event_title\n  const title = item.talk_subtitle ? (\n    <h2 className=\"title\">\n      <Link to={slug}>\n        {title_text}\n        <span className=\"subtitle\">{item.talk_subtitle}</span>\n      </Link>\n    </h2>\n  ) : (\n    <h2 className=\"title\">\n      <Link to={slug}>{title_text}</Link>\n    </h2>\n  )\n\n  const location = item.location ? (\n    <div className=\"location\">{item.location}</div>\n  ) : (\n    \"\"\n  )\n\n  let speakers_list = null\n  let speakers = null\n  const speakers_data = item.speakers ? item.speakers : []\n  if (speakers_data.length > 0) {\n    speakers_list = speakers_data.map((p, i) => {\n      // find headshot\n      if (p?.data) {\n        ;(p.data as ExtendedSpeaker).headshot = headshots[p.data.slug!]\n      }\n      return (\n        <Person\n          key={`p${i}`}\n          person={p?.data as unknown as PersonComponentProps}\n          type=\"dialogue-index\"\n        />\n      )\n    })\n    speakers = <div className=\"speakers\">{speakers_list}</div>\n  }\n\n  return (\n    <article\n      className=\"post dialogue event\"\n      id={item.id?.toLowerCase().replace(/-/g, \"_\")}\n      key={`dialogue-${item.id}`}\n    >\n      {title}\n      <div className=\"meta\">\n        {speakers}\n        {location}\n        <EventTime start={parseInt(item.start!)} />\n      </div>\n    </article>\n  )\n}\n\ninterface DialogueIndexProps {\n  pageContext: {\n    headshots: { [key: string]: Headshot }\n  }\n  data: Queries.DialoguesQuery\n}\n\nconst DialogueIndex = ({ data, pageContext }: DialogueIndexProps) => {\n  const items = data.allAirtableEvents.nodes\n  const pageCount = data.allAirtableEvents.pageInfo.pageCount\n  const headshots = pageContext.headshots\n\n  // Arrange items in the future into reverse order.\n  // TODO: use of any is a shortcut.\n  const sortedItems = items.reduce<{ future: any[]; past: any[] }>(\n    (acc, item) => {\n      const date = new Date(item.data?.start!)\n      if (date > new Date()) {\n        acc.future.unshift(item)\n      } else {\n        acc.past.push(item)\n      }\n      return acc\n    },\n    { future: [], past: [] },\n  )\n  return (\n    <Layout>\n      <SEO title=\"MITH Digital Dialogues\" />\n      <div className=\"page-dialogues\">\n        <section className=\"posts dialogues events\">\n          <h1 className=\"page-title\">Digital Dialogues</h1>\n          <p>\n            Digital Dialogues convenes prominent digital humanities, new media,\n            and information technology practitioners to present their\n            field-defining research. The series, which celebrated its 40th\n            season in Spring 2024, invites intellectual exchange around topics\n            critical to the digital humanities. Follow us on social media (\n            <a href=\"https://twitter.com/UMD_MITH\">@umd_mith</a> on X/Twitter\n            and\n            <a href=\"https://www.instagram.com/mith_umd\">@mith_umd</a> on\n            Instagram) for more details.\n          </p>\n          {sortedItems.future.map(item => (\n            <Entry item={item.data} headshots={headshots} key={item.id} />\n          ))}\n          <h2 className=\"page-title\">Past Digital Dialogues</h2>\n          {sortedItems.past.map(item => (\n            <Entry item={item.data} headshots={headshots} key={item.id} />\n          ))}\n        </section>\n        <Paginator count={pageCount} path=\"digital-dialogues\" />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query Dialogues($skip: Int!, $limit: Int!) {\n    allAirtableEvents(\n      limit: $limit\n      skip: $skip\n      filter: { data: { event_type: { eq: \"Digital Dialogue\" } } }\n      sort: { data: { start_date: DESC } }\n    ) {\n      nodes {\n        data {\n          id\n          event_title\n          talk_title\n          talk_subtitle\n          type: event_type\n          start: start_date\n          end: end_date\n          location\n          speakers {\n            data {\n              name\n              slug\n              new_id\n              group_type\n            }\n          }\n          speaker_affiliations {\n            data {\n              department\n              institution\n              title\n            }\n          }\n        }\n      }\n      pageInfo {\n        pageCount\n      }\n    }\n  }\n`\n\nexport default DialogueIndex\n"],"names":["_ref","count","path","React","className","Array","from","length","_","i","key","Link","activeClassName","to","person","type","pageLocation","isStaff","group_type","includes","slug","affiliations","person_name","id","new_id","name","title","date_span","_aff","aff","data","start","end","map","person_title","person_institution","person_dept","department","institution","Fragment","twitter","headshot","website","hasImg","iconTwitter","FontAwesomeIcon","icon","href","target","rel","headshotData","localFiles","childImageSharp","GatsbyImage","image","gatsbyImageData","alt","src","url","style","objectFit","bio_link","bio","childMarkdownRemark","person_bio","dangerouslySetInnerHTML","__html","html","website_url","startsWith","itemProp","itemScope","Entry","_item$id","item","headshots","event_title","talk_title","title_text","talk_subtitle","location","speakers_list","speakers","speakers_data","p","Person","toLowerCase","replace","EventTime","parseInt","_ref2","pageContext","items","allAirtableEvents","nodes","pageCount","pageInfo","sortedItems","reduce","acc","_item$data","Date","future","unshift","past","push","Layout","SEO","Paginator"],"sourceRoot":""}