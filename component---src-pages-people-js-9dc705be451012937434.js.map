{"version":3,"file":"component---src-pages-people-js-9dc705be451012937434.js","mappings":"2KA8IA,UArImBA,IAAe,IAAd,KAAEC,GAAMD,EAE1B,SAASE,EAAWC,EAAQC,QAAU,IAAVA,IAAAA,GAAW,GACrC,IAAIC,EAAeF,EAAOG,GACtBF,IAEAC,EADEF,EAAOI,QACMJ,EAAOI,QAAQC,WAAW,QACrCL,EAAOI,QACN,UAASJ,EAAOI,UAEN,MAInB,IAAIE,EAAM,GACV,GAAIN,EAAOO,OAAOC,SAAU,CAC1B,MAAMC,EAAKC,EAAAA,cAACC,EAAAA,EAAW,CACrBC,MAAOZ,EAAOO,OAAOC,SAASK,gBAAgBC,gBAC9CC,IAAM,eAAcf,EAAOgB,OAC3BC,SAAU,CACRC,UAAW,WAGfZ,EAAMJ,EACFQ,EAAAA,cAACS,EAAAA,GAAI,CAACC,IAAM,KAAIpB,EAAOqB,SAAUlB,GAAIH,EAAOqB,OAAQC,GAAIpB,EAAcqB,UAAU,YAAYd,GAC5FA,CACN,CAEA,IAAIe,EAAWtB,EACXQ,EAAAA,cAACS,EAAAA,GAAI,CAACC,IAAM,KAAIpB,EAAOqB,SAAUlB,GAAIH,EAAOqB,OAAQC,GAAIpB,GAAeF,EAAOgB,MAC9EhB,EAAOgB,KAEPS,EAAa,GAcjB,OAbIzB,EAAO0B,qBACTD,EAAazB,EAAO0B,mBAAmBC,KAAIC,GACT,SAAxBA,EAASC,YAAiD,wDAAxBD,EAASC,YAAgG,OAAxBD,EAASC,WAChInB,EAAAA,cAAA,OAAKa,UAAU,WAAWpB,GAAIyB,EAASzB,GAAIiB,IAAM,KAAIQ,EAASzB,MAC9DO,EAAAA,cAAA,QAAMa,UAAU,SAASK,EAASE,QAElCpB,EAAAA,cAAA,OAAKa,UAAU,WAAWpB,GAAIyB,EAASzB,GAAIiB,IAAM,KAAIQ,EAASzB,MAC9DO,EAAAA,cAAA,QAAMa,UAAU,SAASK,EAASE,OAClCpB,EAAAA,cAAA,QAAMa,UAAU,cAAcK,EAASC,gBAM7CnB,EAAAA,cAAA,WAASa,UAAU,SAASpB,GAAIH,EAAOqB,OAAQS,MAAO9B,EAAOgB,KAAMI,IAAM,KAAIpB,EAAOqB,UACjFf,EACDI,EAAAA,cAAA,MAAIa,UAAU,QAAQC,GACrBC,EAGP,CAcA,OACAf,EAAAA,cAACqB,EAAAA,EAAM,KACHrB,EAAAA,cAACsB,EAAAA,EAAG,CAACF,MAAM,WACXpB,EAAAA,cAAA,OAAKa,UAAU,eACbb,EAAAA,cAAA,WAASa,UAAU,iBACjBb,EAAAA,cAAA,MAAIa,UAAU,0BAAyB,WAEzCb,EAAAA,cAAA,WAASP,GAAG,WAAWoB,UAAU,gBAC/Bb,EAAAA,cAAA,UAAI,mBACHZ,EAAKmC,OAAOC,MACVC,QAAOC,GAAsB,UAAjBA,EAAEC,aACdV,KAvBX,SAAmBM,GACjB,OAAOA,EAAOK,MAAMX,KAAI3B,GACfD,EAAWC,IAEtB,KAsBMU,EAAAA,cAAA,WAASP,GAAG,aAAaoB,UAAU,gBACjCb,EAAAA,cAAA,UAAI,cACHZ,EAAKmC,OAAOC,MACVC,QAAOC,GAAsB,eAAjBA,EAAEC,aACdV,KAxBX,SAAwBY,GACtB,OAAOA,EAAWD,MAAMX,KAAI3B,GACnBD,EAAWC,GAAQ,IAE9B,MAwBW,C","sources":["webpack://mith-static/./src/pages/people.js"],"sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport './people.css'\n\nconst PeoplePage = ({ data }) => { \n\n  function makePerson(person, useWebsite=false) {\n    let pageLocation = person.id\n    if (useWebsite) {\n      if (person.website) {\n        pageLocation = person.website.startsWith('http')\n          ? person.website\n          : `http://${person.website}`\n      } else {\n        pageLocation = null\n      }\n    }\n\n    let img = ''\n    if (person.fields.headshot) {\n      const el = <GatsbyImage \n        image={person.fields.headshot.childImageSharp.gatsbyImageData}\n        alt={`Headshot of ${person.name}`} \n        imgStyle={{\n          objectFit: \"cover\",\n        }}\n      />\n      img = pageLocation\n        ? <Link key={`p-${person.new_id}`} id={person.new_id} to={pageLocation} className=\"headshot\">{el}</Link>\n        : el\n    }\n\n    let persName = pageLocation \n      ? <Link key={`p-${person.new_id}`} id={person.new_id} to={pageLocation}>{person.name}</Link>\n      : person.name\n\n    let identities = ''\n    if (person.current_identities) {\n      identities = person.current_identities.map(identity => {\n        return (identity.department === 'MITH' || identity.department === 'Maryland Institute for Technology in the Humanities' || identity.department === null)\n          ? <div className=\"identity\" id={identity.id} key={`i-${identity.id}`}>\n            <span className=\"title\">{identity.title}</span>\n          </div>\n          : <div className=\"identity\" id={identity.id} key={`i-${identity.id}`}>\n            <span className=\"title\">{identity.title}</span>\n            <span className=\"department\">{identity.department}</span>\n          </div>\n      })\n    }\n\n    return (\n      <article className=\"person\" id={person.new_id} title={person.name} key={`p-${person.new_id}`}>\n        {img}\n        <h3 className=\"name\">{persName}</h3>\n        {identities}\n      </article>\n    )    \n  }\n\n  function makeStaff(people) {    \n    return people.nodes.map(person => {\n      return makePerson(person)\n    })\n  }\n\n  function makeAffiliates(affiliates) {    \n    return affiliates.nodes.map(person => {\n      return makePerson(person, true)\n    })\n  }\n\n  return (\n\t\t<Layout>\n      <SEO title=\"People\" />\n      <div className=\"page-people\">\n        <section className=\"leader hidden\">\n          <h1 className=\"page-title text-hidden\">People</h1>\n        </section>\n        <section id=\"facstaff\" className=\"people-group\">\n          <h2>Faculty &amp; Staff</h2>\n          {data.people.group\n            .filter(g => g.fieldValue === 'Staff')\n            .map(makeStaff)\n          }\n        </section>\n        <section id=\"affiliates\" className=\"people-group\">\n          <h2>Affiliates</h2>\n          {data.people.group\n            .filter(g => g.fieldValue === 'Affiliates')\n            .map(makeAffiliates)\n          }\n        </section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PeopleQuery {\n    people: allPeopleJson(\n      sort: {\n        fields: last\n      }, \n      filter: {\n        group_type: {in: [\"Staff\", \"Affiliates\"]}\n      }\n    ) {\n      group(field: group_type) {\n        fieldValue\n        nodes {\n          id\n          new_id\n          name\n          first\n          last\n          website\n          twitter\n          current_identities {\n            id\n            title\n            department\n            institution\n            person_bio\n          }\n          fields {\n            headshot {\n              childImageSharp {\n                gatsbyImageData(height: 500, width: 500, transformOptions: {fit: COVER}, backgroundColor: \"rgba(255,255,255,0)\")\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n \nexport default PeoplePage"],"names":["_ref","data","makePerson","person","useWebsite","pageLocation","id","website","startsWith","img","fields","headshot","el","React","GatsbyImage","image","childImageSharp","gatsbyImageData","alt","name","imgStyle","objectFit","Link","key","new_id","to","className","persName","identities","current_identities","map","identity","department","title","Layout","SEO","people","group","filter","g","fieldValue","nodes","affiliates"],"sourceRoot":""}