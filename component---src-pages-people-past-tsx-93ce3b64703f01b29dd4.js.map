{"version":3,"file":"component---src-pages-people-past-tsx-93ce3b64703f01b29dd4.js","mappings":"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","sources":["webpack://mith-static/./src/pages/people-past.tsx"],"sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport \"./people.css\"\n\ninterface PeoplePastProps {\n  data: Queries.PeoplePastQuery\n}\n\ntype Person = NonNullable<\n  Queries.PeoplePastQuery[\"people\"][\"group\"][number][\"nodes\"][number][\"data\"]\n>\n\ntype LinkedIdentity = NonNullable<Person[\"linked_identities\"]>[number]\n\ntype MutablePerson = {\n  -readonly [P in keyof Person]: Person[P];\n};\n\nconst PeoplePastPage = ({ data }: PeoplePastProps) => {\n  function makePerson(person: Person) {\n    let identities = (person.linked_identities || []).filter(\n      i => i?.data?.start,\n    )\n    return (\n      <article\n        className=\"person\"\n        id={person.new_id?.toString() || \"\"}\n        title={person.name || \"\"}\n        key={`p-${person.new_id}`}\n      >\n        <h3 className=\"name\">{person.name}</h3>\n        <div className=\"details\">\n          {identities\n            .sort((a, b) => a!.data!.start! - b!.data!.start!)\n            .map(identity => {\n              const end =\n                identity?.data?.start === identity?.data?.end ? (\n                  \"\"\n                ) : (\n                  <span className=\"end\">{identity?.data?.end}</span>\n                )\n              return (\n                <article\n                  className=\"identity\"\n                  id={identity?.data?.id?.toString() || \"\"}\n                  key={`i-${identity?.data?.id || \"\"}`}\n                >\n                  <span className=\"title\">{identity?.data?.title}</span>\n                  <span className=\"date-span\">\n                    <span className=\"start\">{identity?.data?.start}</span>\n                    {end}\n                  </span>\n                </article>\n              )\n            })}\n        </div>\n      </article>\n    )\n  }\n\n  const handlePeople = (people: readonly { data: Person | null}[]): JSX.Element[] => {\n    \n    // dedupe identities\n    const filteredPeople: {data: MutablePerson}[] = people.map((p: {data: Person | null}) => {\n      const seen = new Set();\n      const filteredIdentities = p.data?.linked_identities?.filter((identity: LinkedIdentity) => {\n        const data = identity!.data!\n        const identifier = `${data.title}-${data.start}-${data.end}`;\n        if (seen.has(identifier)) {\n          return false;\n        } else {\n          if (data.end && data.start) {\n            seen.add(identifier);\n            return true;\n          }\n          return false;\n        }\n      }) ?? [];\n\n      // Sort them by end date\n      filteredIdentities.sort((a, b) => b!.data!.end! - a!.data!.end!)\n\n      const mutablePerson: MutablePerson = { ...p.data! } as MutablePerson;\n      mutablePerson.linked_identities = filteredIdentities;\n      return { data: mutablePerson };\n    })\n\n    // sort by end date\n    filteredPeople.sort((a, b) => {\n      const aMaxEnd = Math.max(...a!.data.linked_identities!.map(identity => identity!.data!.end || 0));\n      const bMaxEnd = Math.max(...b!.data.linked_identities!.map(identity => identity!.data!.end || 0));\n      return bMaxEnd - aMaxEnd;\n    })\n    \n    console.log(filteredPeople)\n    return filteredPeople.map(p => {\n      return makePerson(p.data!)\n    })\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Past People\" />\n      <div className=\"page-past-people\">\n        <section className=\"leader hidden\">\n          <h1 className=\"page-title text-hidden\">Past People</h1>\n        </section>\n        {\n          // Sort the people groups in the order specified by the `sort` field in the `allAirtableGroups` data.\n          data.people.group\n            .filter(g => g.fieldValue?.startsWith(\"Past\"))\n            .sort((a, b) => {\n              const groupsA =\n                data.groups.nodes.filter(\n                  g => g.data?.group_name === a.fieldValue,\n                )[0].data?.sort || 1\n              const groupsB =\n                data.groups.nodes.filter(\n                  g => g.data?.group_name === b.fieldValue,\n                )[0].data?.sort || 1\n\n              return groupsA - groupsB\n            })\n            .map(people => {\n              return (\n                <section\n                  id={people.fieldValue?.toLowerCase().replace(\" \", \"_\")}\n                  className=\"people-group\"\n                  key={people.fieldValue}\n                >\n                  <h2>{people.fieldValue}</h2>\n                  {handlePeople(people.nodes)}\n                </section>\n              )\n            })\n        }\n      </div>\n    </Layout>\n  )\n}\nexport const query = graphql`\n  query PeoplePast {\n    people: allAirtablePeople(\n      filter: { data: { group_type: { regex: \"/Past/\" } } }\n      sort: { data: { name: ASC } }\n    ) {\n      group(\n        field: { data: { people_groups: { data: { group_name: SELECT } } } }\n      ) {\n        fieldValue\n        nodes {\n          data {\n            name\n            linked_identities {\n              data {\n                title\n                start\n                end\n                id\n              }\n            }\n            id\n            new_id\n            people_groups {\n              data {\n                group_name\n              }\n            }\n          }\n        }\n      }\n    }\n    groups: allAirtableGroups {\n      nodes {\n        data {\n          sort\n          group_name\n        }\n      }\n    }\n  }\n`\n\nexport default PeoplePastPage\n\n"],"names":["_ref","data","handlePeople","people","filteredPeople","map","p","_p$data$linked_identi","_p$data","_p$data$linked_identi2","seen","Set","filteredIdentities","linked_identities","filter","identity","identifier","title","start","end","has","add","sort","a","b","mutablePerson","aMaxEnd","Math","max","apply","_toConsumableArray","console","log","person","_person$new_id","identities","i","_i$data","React","className","id","new_id","toString","name","key","_identity$data","_identity$data2","_identity$data3","_identity$data4","_identity$data4$id","_identity$data5","_identity$data6","_identity$data7","makePerson","Layout","SEO","group","g","_g$fieldValue","fieldValue","startsWith","_data$groups$nodes$fi","_data$groups$nodes$fi2","groups","nodes","_g$data","group_name","_g$data2","_people$fieldValue","toLowerCase","replace"],"sourceRoot":""}