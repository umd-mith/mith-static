{"version":3,"file":"component---src-templates-event-index-js-ab8ab840975617b829f5.js","mappings":"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","sources":["webpack://mith-static/./src/components/paginator.js","webpack://mith-static/./src/templates/event-index.js"],"sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\nimport './paginator.css'\n\nconst Paginator = ({count, path}) => {\n  return(\n    <section className=\"pagination-wrap\">\n      <ul className=\"pagination\">\n        {Array.from({ length: count }, (_, i) => (\n          <li className=\"page-link\">\n            <Link\n              activeClassName=\"active\" \n              className=\"page-link\"\n              key={`pagination-number${i + 1}`}\n              to={`/${path}/${i === 0 ? \"\" : i + 1}`}>\n              {i + 1}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Paginator;","import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport Layout from '../components/layout'\nimport Paginator from '../components/paginator'\nimport SEO from '../components/seo'\nimport EventTime from '../components/event-time'\nimport Person from '../components/person'\n\nimport './event-index.css'\n\nconst EventIndex = ({data}) => {\n  const items = data.allEventsJson.nodes\n  const pageCount = data.allEventsJson.pageInfo.pageCount\n\n  return (\n    <Layout>\n      <SEO title=\"MITH Events\" />\n      <div className=\"page-events\">\n        <section className=\"posts events\">\n          <h1 className=\"page-title\">Events</h1>\n          {items.map(item => {\n\n            const slug = '/events/' + item.id + '/'\n            \n            const event_title = item.event_title\n            const talk_title = item.talk_title\n            const title_text = talk_title ? talk_title : event_title\n            const title = item.talk_subtitle\n              ? <h2 className=\"title\"><Link to={slug}>{title_text}<span className=\"subtitle\">{item.talk_subtitle}</span></Link></h2> \n              : <h2 className=\"title\"><Link to={slug}>{title_text}</Link></h2>\n\n            let image = ''\n            let excerpt = '' \n            if (item.fields) {\n              if (item.fields.image) {\n                image = <Link to={slug} className=\"image\">\n                  <GatsbyImage \n                    image={item.fields.image.childImageSharp.gatsbyImageData}\n                    alt={item.title} \n                    className=\"event-image\" \n                /></Link>\n              }\n              if (item.fields.eventsDescription) {\n                excerpt = <div className=\"excerpt\">\n                  {item.fields.eventsDescription.childMarkdownRemark.excerpt}\n                </div>\n              }\n            }\n          \n            let speakers_list = null\n            let speakers = null\n            const speakers_data = item.speakers ? item.speakers : []\n            if (item.speakers) {\n              speakers_list = speakers_data.map((p, i) => {\n                return <Person key={`p${i}`} person={p} showTitle=\"false\" type=\"index\" />\n              })\n              speakers = <div className=\"speakers hidden\">\n                <ul className=\"inline-list\">\n                  {speakers_list}\n                </ul>\n              </div>\n            }\n            const status = item.status === 'canceled' ? <span className={`pill event-status ${item.status}`}>{item.status}</span> : ''\n            let types = null\n            let types_list = null \n            if (item.type) {\n              types_list = item.type.map(t => {\n                return <span className=\"pill event-type\" key={`t${t}`}>{t}</span>\n              })\n              \n              types = <div className=\"event-types\">{types_list}{status}</div>\n            }\n\n            const itemId = item.id.replace(/-/g, '_')\n            const iconLocation = <FontAwesomeIcon icon=\"map-marker-alt\" />\n            const location = item.location \n              ? <span className=\"location\">{iconLocation} {item.location}</span> : ''\n            const details = <Link className=\"button\" to={slug}>Event Details</Link>\n\n            return (\n              <article className=\"event-item\" key={`event-${item.id}`} id={itemId}>\n                {image}\n                <div className=\"content\">\n                  {title}\n                  {types}\n                  {excerpt}\n                </div>\n                <div className=\"meta\">\n                  <EventTime start={item.start} end={item.end} icon=\"yes\" />\n                  {location}\n                </div>\n                <div className=\"details\">\n                  {details}\n                </div>\n              </article>\n            )\n          })}\n        </section>\n        <Paginator count={pageCount} path=\"events\" />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query EventsQuery($skip: Int!, $limit: Int!) {\n    allEventsJson (\n      limit: $limit\n      skip: $skip\n      sort: {\n        fields: [start_date], \n        order: [DESC]\n      }\n      filter: {\n        event_type: {ne: \"Digital Dialogue\"}\n      }\n    ) {\n      nodes {\n        id\n        event_title\n        talk_title\n        talk_subtitle\n        type: event_type\n        start: start_date\n        end: end_date\n        location\n        status\n        speakers {\n          name\n          affiliations {\n            title\n            department\n            institution\n          }\n          person_group\n          slug\n          new_id\n        }\n        fields {\n          eventsDescription {\n            childMarkdownRemark {\n                excerpt(pruneLength: 250)\n              }\n          }\n          image {\n            childImageSharp {\n              gatsbyImageData(width: 600, quality: 100, backgroundColor: \"rgba(255,255,255,0)\")\n            }\n          }\n        }\n      }\n      pageInfo {\n        pageCount\n      }\n    }\n  }\n`\n \nexport default EventIndex\n"],"names":["_ref","count","path","React","className","Array","from","length","_","i","Link","activeClassName","key","to","data","items","allEventsJson","nodes","pageCount","pageInfo","Layout","SEO","title","map","item","slug","id","event_title","talk_title","title_text","talk_subtitle","image","excerpt","fields","GatsbyImage","childImageSharp","gatsbyImageData","alt","eventsDescription","childMarkdownRemark","speakers_list","speakers","speakers_data","p","Person","person","showTitle","type","status","types","types_list","t","itemId","replace","iconLocation","FontAwesomeIcon","icon","location","details","EventTime","start","end","Paginator"],"sourceRoot":""}