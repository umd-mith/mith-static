{"version":3,"file":"component---src-templates-dialogue-index-js-6bd46060cd1aa2f3f124.js","mappings":"uIAyBA,IApBkBA,IAAoB,IAAnB,MAACC,EAAK,KAAEC,GAAKF,EAC9B,OACEG,EAAAA,cAAA,WAASC,UAAU,mBACjBD,EAAAA,cAAA,MAAIC,UAAU,cACXC,MAAMC,KAAK,CAAEC,OAAQN,IAAS,CAACO,EAAGC,IACjCN,EAAAA,cAAA,MAAIC,UAAU,aACZD,EAAAA,cAACO,EAAAA,GAAI,CACHC,gBAAgB,SAChBP,UAAU,YACVQ,IAAM,oBAAmBH,EAAI,IAC7BI,GAAK,IAAGX,KAAc,IAANO,EAAU,GAAKA,EAAI,KAClCA,EAAI,OAKL,C,wGCyFd,UAnGsBT,IAA0B,IAAzB,KAACc,EAAI,YAAEC,GAAYf,EACxC,MAAMgB,EAAQF,EAAKG,cAAcC,MAC3BC,EAAYL,EAAKG,cAAcG,SAASD,UACxCE,EAAYN,EAAYM,UAE9B,OACElB,EAAAA,cAACmB,EAAAA,EAAM,KACLnB,EAAAA,cAACoB,EAAAA,EAAG,CAACC,MAAM,2BACXrB,EAAAA,cAAA,OAAKC,UAAU,kBACbD,EAAAA,cAAA,WAASC,UAAU,0BACjBD,EAAAA,cAAA,MAAIC,UAAU,cAAa,qBAC1BY,EAAMS,KAAIC,IAET,MAAMC,EAAO,sBAAwBD,EAAKE,GAAK,IAEzCC,EAAcH,EAAKG,YACnBC,EAAaJ,EAAKI,WAClBC,EAAaD,GAA0BD,EACvCL,EAAQE,EAAKM,cACjB7B,EAAAA,cAAA,MAAIC,UAAU,SACZD,EAAAA,cAACO,EAAAA,GAAI,CAACG,GAAIc,GAAOI,EAAW5B,EAAAA,cAAA,QAAMC,UAAU,YAAYsB,EAAKM,iBAE/D7B,EAAAA,cAAA,MAAIC,UAAU,SACZD,EAAAA,cAACO,EAAAA,GAAI,CAACG,GAAIc,GAAOI,IAGfE,EAAWP,EAAKO,SAAW9B,EAAAA,cAAA,OAAKC,UAAU,YAAYsB,EAAKO,UAAkB,GAEnF,IAAIC,EAAgB,KAChBC,EAAW,KACf,MAAMC,EAAgBV,EAAKS,SAAWT,EAAKS,SAAW,GAUtD,OATIT,EAAKS,SAAS5B,OAAS,IACzB2B,EAAgBE,EAAcX,KAAI,CAACY,EAAG5B,KAEpC4B,EAAEC,SAAWjB,EAAUgB,EAAEV,MAClBxB,EAAAA,cAACoC,EAAAA,EAAM,CAAC3B,IAAM,IAAGH,IAAK+B,OAAQH,EAAGI,KAAK,sBAE/CN,EAAWhC,EAAAA,cAAA,OAAKC,UAAU,YAAY8B,IAItC/B,EAAAA,cAAA,WAASC,UAAU,sBAAsBwB,GAAIF,EAAKE,GAAGc,cAAcC,QAAQ,KAAM,KAAM/B,IAAM,YAAWc,EAAKE,MAC1GJ,EACDrB,EAAAA,cAAA,OAAKC,UAAU,QACZ+B,EACAF,EACD9B,EAAAA,cAACyC,EAAAA,EAAS,CAACC,MAAOnB,EAAKmB,SAEjB,KAKhB1C,EAAAA,cAAC2C,EAAAA,EAAS,CAAC7C,MAAOkB,EAAWjB,KAAK,uBAE7B,C","sources":["webpack://mith-static/./src/components/paginator.js","webpack://mith-static/./src/templates/dialogue-index.js"],"sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\nimport './paginator.css'\n\nconst Paginator = ({count, path}) => {\n  return(\n    <section className=\"pagination-wrap\">\n      <ul className=\"pagination\">\n        {Array.from({ length: count }, (_, i) => (\n          <li className=\"page-link\">\n            <Link\n              activeClassName=\"active\" \n              className=\"page-link\"\n              key={`pagination-number${i + 1}`}\n              to={`/${path}/${i === 0 ? \"\" : i + 1}`}>\n              {i + 1}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Paginator;","import React from 'react'\nimport { graphql, Link } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Paginator from '../components/paginator'\nimport SEO from '../components/seo'\nimport EventTime from '../components/event-time'\nimport Person from '../components/person'\n\nimport './event-index.css'\n\nconst DialogueIndex = ({data, pageContext}) => {\n  const items = data.allEventsJson.nodes\n  const pageCount = data.allEventsJson.pageInfo.pageCount\n  const headshots = pageContext.headshots\n\n  return (\n    <Layout>\n      <SEO title=\"MITH Digital Dialogues\" />\n      <div className=\"page-dialogues\">\n        <section className=\"posts dialogues events\">\n          <h1 className=\"page-title\">Digital Dialogues</h1>\n          {items.map(item => {\n\n            const slug = '/digital-dialogues/' + item.id + '/'\n            \n            const event_title = item.event_title\n            const talk_title = item.talk_title\n            const title_text = talk_title ? talk_title : event_title\n            const title = item.talk_subtitle\n            ? <h2 className=\"title\">\n                <Link to={slug}>{title_text}<span className=\"subtitle\">{item.talk_subtitle}</span></Link>\n              </h2>\n            : <h2 className=\"title\">\n                <Link to={slug}>{title_text}</Link>\n              </h2>\n\n            const location = item.location ? <div className=\"location\">{item.location}</div> : ''\n          \n            let speakers_list = null\n            let speakers = null\n            const speakers_data = item.speakers ? item.speakers : []\n            if (item.speakers.length > 0) {\n              speakers_list = speakers_data.map((p, i) => {\n                // find headshot                \n                p.headshot = headshots[p.slug]\n                return <Person key={`p${i}`} person={p} type=\"dialogue-index\" />\n              })\n              speakers = <div className=\"speakers\">{speakers_list}</div>\n            }\n\n            return (\n              <article className=\"post dialogue event\" id={item.id.toLowerCase().replace(/-/g, '_')} key={`dialogue-${item.id}`}>\n                {title}\n                <div className=\"meta\">\n                  {speakers}\n                  {location}\n                  <EventTime start={item.start} />\n                </div>\n              </article>\n            )\n\n          })}\n        </section>\n        <Paginator count={pageCount} path=\"digital-dialogues\" />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query DialoguesQuery($skip: Int!, $limit: Int!) {\n    allEventsJson (\n      limit: $limit\n      skip: $skip\n      filter: {\n        event_type: {eq: \"Digital Dialogue\"}\n      }\n      sort: {\n        fields: [start_date], order: [DESC]\n      }\n    ) {\n      nodes {\n        id\n        event_title\n        talk_title\n        talk_subtitle\n        type: event_type\n        start: start_date\n        end: end_date\n        location\n        speakers {\n          name\n          affiliations {\n            title\n            department\n            institution\n          }\n          person_group\n          slug\n          new_id\n        }\n      }\n      pageInfo {\n        pageCount\n      }\n    }\n  }\n`\n \nexport default DialogueIndex\n"],"names":["_ref","count","path","React","className","Array","from","length","_","i","Link","activeClassName","key","to","data","pageContext","items","allEventsJson","nodes","pageCount","pageInfo","headshots","Layout","SEO","title","map","item","slug","id","event_title","talk_title","title_text","talk_subtitle","location","speakers_list","speakers","speakers_data","p","headshot","Person","person","type","toLowerCase","replace","EventTime","start","Paginator"],"sourceRoot":""}