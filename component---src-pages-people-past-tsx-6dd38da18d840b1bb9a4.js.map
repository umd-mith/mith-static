{"version":3,"file":"component---src-pages-people-past-tsx-6dd38da18d840b1bb9a4.js","mappings":"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","sources":["webpack://mith-static/./src/pages/people-past.tsx"],"sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport \"./people.css\"\n\ninterface PeoplePastProps {\n  data: Queries.PeoplePastQuery\n}\n\ntype Person = NonNullable<\n  Queries.PeoplePastQuery[\"people\"][\"group\"][number][\"nodes\"][number][\"data\"]\n>\n\nconst PeoplePastPage = ({ data }: PeoplePastProps) => {\n  function makePerson(person: Person) {\n    let identities = (person.linked_identities || []).filter(\n      i => i?.data?.start,\n    )\n    return (\n      <article\n        className=\"person\"\n        id={person.new_id?.toString() || \"\"}\n        title={person.name || \"\"}\n        key={`p-${person.new_id}`}\n      >\n        <h3 className=\"name\">{person.name}</h3>\n        <div className=\"details\">\n          {identities\n            .sort((a, b) => a!.data!.start! - b!.data!.start!)\n            .map(identity => {\n              const end =\n                identity?.data?.start === identity?.data?.end ? (\n                  \"\"\n                ) : (\n                  <span className=\"end\">{identity?.data?.end}</span>\n                )\n              return (\n                <article\n                  className=\"identity\"\n                  id={identity?.data?.id?.toString() || \"\"}\n                  key={`i-${identity?.data?.id || \"\"}`}\n                >\n                  <span className=\"title\">{identity?.data?.title}</span>\n                  <span className=\"date-span\">\n                    <span className=\"start\">{identity?.data?.start}</span>\n                    {end}\n                  </span>\n                </article>\n              )\n            })}\n        </div>\n      </article>\n    )\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Past People\" />\n      <div className=\"page-past-people\">\n        <section className=\"leader hidden\">\n          <h1 className=\"page-title text-hidden\">Past People</h1>\n        </section>\n        {\n          // Sort the people groups in the order specified by the `sort` field in the `allAirtableGroups` data.\n          data.people.group\n            .filter(g => g.fieldValue?.startsWith(\"Past\"))\n            .sort((a, b) => {\n              const groupsA =\n                data.groups.nodes.filter(\n                  g => g.data?.group_name === a.fieldValue,\n                )[0].data?.sort || 1\n              const groupsB =\n                data.groups.nodes.filter(\n                  g => g.data?.group_name === b.fieldValue,\n                )[0].data?.sort || 1\n\n              return groupsA - groupsB\n            })\n            .map(people => {\n              return (\n                <section\n                  id={people.fieldValue?.toLowerCase().replace(\" \", \"_\")}\n                  className=\"people-group\"\n                >\n                  <h2>{people.fieldValue}</h2>\n                  {people.nodes.map(p => {\n                    return makePerson(p.data!)\n                  })}\n                </section>\n              )\n            })\n        }\n      </div>\n    </Layout>\n  )\n}\nexport const query = graphql`\n  query PeoplePast {\n    people: allAirtablePeople(\n      filter: { data: { group_type: { regex: \"/Past/\" } } }\n      sort: { data: { name: ASC } }\n    ) {\n      group(\n        field: { data: { people_groups: { data: { group_name: SELECT } } } }\n      ) {\n        fieldValue\n        nodes {\n          data {\n            name\n            linked_identities {\n              data {\n                title\n                start\n                end\n                id\n              }\n            }\n            id\n            new_id\n            people_groups {\n              data {\n                group_name\n              }\n            }\n          }\n        }\n      }\n    }\n    groups: allAirtableGroups {\n      nodes {\n        data {\n          sort\n          group_name\n        }\n      }\n    }\n  }\n`\n\nexport default PeoplePastPage\n\n"],"names":["_ref","data","React","Layout","SEO","title","className","people","group","filter","g","_g$fieldValue","fieldValue","startsWith","sort","a","b","_data$groups$nodes$fi","_data$groups$nodes$fi2","groups","nodes","_g$data","group_name","_g$data2","map","_people$fieldValue","id","toLowerCase","replace","p","person","_person$new_id","identities","linked_identities","i","_i$data","start","new_id","toString","name","key","identity","_identity$data","_identity$data2","_identity$data3","_identity$data4","_identity$data4$id","_identity$data5","_identity$data6","_identity$data7","end","makePerson"],"sourceRoot":""}