{"version":3,"file":"component---src-templates-event-index-tsx-55212b4a0a799f3a2b3c.js","mappings":"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","sources":["webpack://mith-static/./src/components/paginator.tsx","webpack://mith-static/./src/templates/event-index.tsx"],"sourcesContent":["import { Link } from \"gatsby\"\nimport React from \"react\"\n\nimport \"./paginator.css\"\n\ninterface PaginatorProps {\n  count: number\n  path: string\n}\n\nconst Paginator = ({ count, path }: PaginatorProps) => {\n  return (\n    <section className=\"pagination-wrap\">\n      <ul className=\"pagination\">\n        {Array.from({ length: count }, (_, i) => (\n          <li className=\"page-link\" key={`pa${i}`}>\n            <Link\n              activeClassName=\"active\"\n              className=\"page-link\"\n              key={`pagination-number${i + 1}`}\n              to={`/${path}/${i === 0 ? \"\" : i + 1}`}\n            >\n              {i + 1}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Paginator\n\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport Layout from \"../components/layout\"\nimport Paginator from \"../components/paginator\"\nimport SEO from \"../components/seo\"\nimport EventTime from \"../components/event-time\"\n// import Person, { PersonComponentProps } from \"../components/person\"\n\nimport \"./event-index.css\"\n\ninterface EventIndexProps {\n  data: Queries.EventsQuery\n}\n\nconst EventIndex = ({ data }: EventIndexProps) => {\n  const items = data.allAirtableEvents.nodes\n  const pageCount = data.allAirtableEvents.pageInfo.pageCount\n\n  return (\n    <Layout>\n      <SEO title=\"MITH Events\" />\n      <div className=\"page-events\">\n        <section className=\"posts events\">\n          <h1 className=\"page-title\">Events</h1>\n          {items.map(_item => {\n            const item = _item.data!\n            const slug = \"/events/\" + item.id + \"/\"\n\n            const event_title = item.event_title\n            const talk_title = item.talk_title\n            const title_text = talk_title ? talk_title : event_title\n            const title = item.talk_subtitle ? (\n              <h2 className=\"title\">\n                <Link to={slug}>\n                  {title_text}\n                  <span className=\"subtitle\">{item.talk_subtitle}</span>\n                </Link>\n              </h2>\n            ) : (\n              <h2 className=\"title\">\n                <Link to={slug}>{title_text}</Link>\n              </h2>\n            )\n\n            let image: JSX.Element | undefined\n            let excerpt: JSX.Element | undefined\n            if (item.image) {\n              image = (\n                <Link to={slug} className=\"image\">\n                  <GatsbyImage\n                    image={\n                      item.image.localFiles?.[0]?.childImageSharp\n                        ?.gatsbyImageData!\n                    }\n                    alt={item.event_title || \"\"}\n                    className=\"event-image\"\n                  />\n                </Link>\n              )\n            }\n            if (item.description) {\n              excerpt = (\n                <div className=\"excerpt\">\n                  {item.description.childMarkdownRemark?.excerpt}\n                </div>\n              )\n            }\n\n            // TODO: The speakers list is not currently being displayed. Uncomment this code to display the list and also add to return statement below\n\n            // let speakers_list = null\n            // let speakers: JSX.Element | undefined\n            // const speakers_data = item.speakers ? item.speakers : []\n            // if (item.speakers) {\n            //   speakers_list = speakers_data.map((p, i) => {\n            //     return (\n            //       <Person\n            //         key={`p${i}`}\n            //         person={p?.data as unknown as PersonComponentProps}\n            //         type=\"index\"\n            //       />\n            //     )\n            //   })\n\n            // speakers = (\n            //   <div className=\"speakers hidden\">\n            //     <ul className=\"inline-list\">{speakers_list}</ul>\n            //   </div>\n            // )\n            //}\n            const status =\n              item.status === \"canceled\" ? (\n                <span className={`pill event-status ${item.status}`}>\n                  {item.status}\n                </span>\n              ) : (\n                \"\"\n              )\n            let types = null\n            let types_list = null\n            if (item.type) {\n              types_list = item.type.map(t => {\n                return (\n                  <span className=\"pill event-type\" key={`t${t}`}>\n                    {t}\n                  </span>\n                )\n              })\n\n              types = (\n                <div className=\"event-types\">\n                  {types_list}\n                  {status}\n                </div>\n              )\n            }\n\n            const itemId = item.id?.replace(/-/g, \"_\")\n            const iconLocation = <FontAwesomeIcon icon=\"map-marker-alt\" />\n            const location = item.location ? (\n              <span className=\"location\">\n                {iconLocation} {item.location}\n              </span>\n            ) : (\n              \"\"\n            )\n            const details = (\n              <Link className=\"button\" to={slug}>\n                Event Details\n              </Link>\n            )\n\n            return (\n              <article\n                className=\"event-item\"\n                key={`event-${item.id}`}\n                id={itemId}\n              >\n                {image}\n                <div className=\"content\">\n                  {title}\n                  {types}\n                  {excerpt}\n                </div>\n                <div className=\"meta\">\n                  <EventTime\n                    start={parseInt(item.start!)}\n                    end={parseInt(item.end!)}\n                    icon=\"yes\"\n                  />\n                  {location}\n                </div>\n                <div className=\"details\">{details}</div>\n              </article>\n            )\n          })}\n        </section>\n        <Paginator count={pageCount} path=\"events\" />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query Events($skip: Int!, $limit: Int!) {\n    allAirtableEvents(\n      limit: $limit\n      skip: $skip\n      filter: { data: { event_type: { ne: \"Digital Dialogue\" } } }\n      sort: { data: { start_date: DESC } }\n    ) {\n      nodes {\n        data {\n          id\n          event_title\n          talk_title\n          talk_subtitle\n          type: event_type\n          start: start_date\n          end: end_date\n          location\n          status\n          speakers {\n            data {\n              name\n              slug\n              new_id\n              linked_identities {\n                data {\n                  title\n                  department\n                  institution\n                  person_group\n                }\n              }\n            }\n          }\n          image {\n            localFiles {\n              childImageSharp {\n                gatsbyImageData(\n                  width: 500\n                  quality: 100\n                  backgroundColor: \"rgba(255,255,255,0)\"\n                )\n              }\n            }\n          }\n          description {\n            childMarkdownRemark {\n              excerpt(pruneLength: 250)\n            }\n          }\n        }\n      }\n      pageInfo {\n        pageCount\n      }\n    }\n  }\n`\n\nexport default EventIndex\n"],"names":["_ref","count","path","React","className","Array","from","length","_","i","key","Link","activeClassName","to","data","items","allAirtableEvents","nodes","pageCount","pageInfo","Layout","SEO","title","map","_item","_item$id","item","slug","id","event_title","talk_title","title_text","talk_subtitle","image","excerpt","_item$image$localFile","_item$image$localFile2","_item$image$localFile3","_item$description$chi","GatsbyImage","localFiles","childImageSharp","gatsbyImageData","alt","description","childMarkdownRemark","status","types","types_list","type","t","itemId","replace","iconLocation","FontAwesomeIcon","icon","location","details","EventTime","start","parseInt","end","Paginator"],"sourceRoot":""}