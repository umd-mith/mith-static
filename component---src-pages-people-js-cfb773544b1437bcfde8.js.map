{"version":3,"file":"component---src-pages-people-js-cfb773544b1437bcfde8.js","mappings":"4KAiJA,UAxImBA,IAAe,IAAd,KAAEC,GAAMD,EAE1B,SAASE,EAAWC,EAAQC,QAAU,IAAVA,IAAAA,GAAW,GACrC,IAAIC,EAAeF,EAAOG,GACtBF,IAEAC,EADEF,EAAOI,QACMJ,EAAOI,QAAQC,WAAW,QACrCL,EAAOI,QACP,UAAUJ,EAAOI,UAEN,MAInB,IAAIE,EAAM,GACV,GAAIN,EAAOO,SAASC,WAAW,GAAGC,gBAAiB,CACjD,MAAMC,EAAKC,EAAAA,cAACC,EAAAA,EAAW,CACrBC,MAAOb,EAAOO,SAASC,WAAW,GAAGC,gBAAgBK,gBACrDC,IAAK,eAAef,EAAOgB,OAC3BC,SAAU,CACRC,UAAW,WAGfZ,EAAMJ,EACFS,EAAAA,cAACQ,EAAAA,GAAI,CAACC,IAAK,KAAKpB,EAAOqB,SAAUlB,GAAIH,EAAOqB,OAAQC,GAAIpB,EAAcqB,UAAU,YAAYb,GAC5FA,CACN,CAEA,IAAIc,EAAWtB,EACXS,EAAAA,cAACQ,EAAAA,GAAI,CAACC,IAAK,KAAKpB,EAAOqB,SAAUlB,GAAIH,EAAOqB,OAAQC,GAAIpB,GAAeF,EAAOgB,MAC9EhB,EAAOgB,KAEPS,EAAa,GAejB,OAdIzB,EAAO0B,wBACTD,EAAazB,EAAO0B,sBAAsBC,KAAIC,IAC5C,MAAMC,EAAWD,EAAU9B,KAC3B,MAAgC,SAAxB+B,EAASC,YAAiD,wDAAxBD,EAASC,YAAgG,OAAxBD,EAASC,WAChInB,EAAAA,cAAA,OAAKY,UAAU,WAAWpB,GAAI0B,EAAS1B,GAAIiB,IAAK,KAAKS,EAAS1B,MAC9DQ,EAAAA,cAAA,QAAMY,UAAU,SAASM,EAASE,QAElCpB,EAAAA,cAAA,OAAKY,UAAU,WAAWpB,GAAI0B,EAAS1B,GAAIiB,IAAK,KAAKS,EAAS1B,MAC9DQ,EAAAA,cAAA,QAAMY,UAAU,SAASM,EAASE,OAClCpB,EAAAA,cAAA,QAAMY,UAAU,cAAcM,EAASC,YACnC,KAKVnB,EAAAA,cAAA,WAASY,UAAU,SAASpB,GAAIH,EAAOqB,OAAQU,MAAO/B,EAAOgB,KAAMI,IAAK,KAAKpB,EAAOqB,UACjFf,EACDK,EAAAA,cAAA,MAAIY,UAAU,QAAQC,GACrBC,EAGP,CAcA,OACAd,EAAAA,cAACqB,EAAAA,EAAM,KACHrB,EAAAA,cAACsB,EAAAA,EAAG,CAACF,MAAM,WACXpB,EAAAA,cAAA,OAAKY,UAAU,eACbZ,EAAAA,cAAA,WAASY,UAAU,iBACjBZ,EAAAA,cAAA,MAAIY,UAAU,0BAAyB,WAEzCZ,EAAAA,cAAA,WAASR,GAAG,WAAWoB,UAAU,gBAC/BZ,EAAAA,cAAA,UAAI,mBACHb,EAAKoC,OAAOC,MACVC,QAAOC,GAAsB,UAAjBA,EAAEC,aACdX,KAvBX,SAAmBO,GACjB,OAAOA,EAAOK,MAAMZ,KAAI3B,GACfD,EAAWC,EAAOF,OAE7B,KAsBMa,EAAAA,cAAA,WAASR,GAAG,aAAaoB,UAAU,gBACjCZ,EAAAA,cAAA,UAAI,cACHb,EAAKoC,OAAOC,MACVC,QAAOC,GAAsB,eAAjBA,EAAEC,aACdX,KAxBX,SAAwBa,GACtB,OAAOA,EAAWD,MAAMZ,KAAI3B,GACnBD,EAAWC,EAAOF,MAAM,IAEnC,MAwBW,C","sources":["webpack://mith-static/./src/pages/people.js"],"sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport './people.css'\n\nconst PeoplePage = ({ data }) => { \n\n  function makePerson(person, useWebsite=false) {\n    let pageLocation = person.id\n    if (useWebsite) {\n      if (person.website) {\n        pageLocation = person.website.startsWith('http')\n          ? person.website\n          : `http://${person.website}`\n      } else {\n        pageLocation = null\n      }\n    }\n\n    let img = ''\n    if (person.headshot.localFiles[0].childImageSharp) {\n      const el = <GatsbyImage \n        image={person.headshot.localFiles[0].childImageSharp.gatsbyImageData}\n        alt={`Headshot of ${person.name}`} \n        imgStyle={{\n          objectFit: \"cover\",\n        }}\n      />\n      img = pageLocation\n        ? <Link key={`p-${person.new_id}`} id={person.new_id} to={pageLocation} className=\"headshot\">{el}</Link>\n        : el\n    }\n\n    let persName = pageLocation \n      ? <Link key={`p-${person.new_id}`} id={person.new_id} to={pageLocation}>{person.name}</Link>\n      : person.name\n\n    let identities = ''\n    if (person.identities_as_current) {\n      identities = person.identities_as_current.map(_identity => {\n        const identity = _identity.data\n        return (identity.department === 'MITH' || identity.department === 'Maryland Institute for Technology in the Humanities' || identity.department === null)\n          ? <div className=\"identity\" id={identity.id} key={`i-${identity.id}`}>\n            <span className=\"title\">{identity.title}</span>\n          </div>\n          : <div className=\"identity\" id={identity.id} key={`i-${identity.id}`}>\n            <span className=\"title\">{identity.title}</span>\n            <span className=\"department\">{identity.department}</span>\n          </div>\n      })\n    }\n\n    return (\n      <article className=\"person\" id={person.new_id} title={person.name} key={`p-${person.new_id}`}>\n        {img}\n        <h3 className=\"name\">{persName}</h3>\n        {identities}\n      </article>\n    )    \n  }\n\n  function makeStaff(people) { \n    return people.nodes.map(person => {\n      return makePerson(person.data)\n    })\n  }\n\n  function makeAffiliates(affiliates) {    \n    return affiliates.nodes.map(person => {\n      return makePerson(person.data, true)\n    })\n  }\n\n  return (\n\t\t<Layout>\n      <SEO title=\"People\" />\n      <div className=\"page-people\">\n        <section className=\"leader hidden\">\n          <h1 className=\"page-title text-hidden\">People</h1>\n        </section>\n        <section id=\"facstaff\" className=\"people-group\">\n          <h2>Faculty &amp; Staff</h2>\n          {data.people.group\n            .filter(g => g.fieldValue === 'Staff')\n            .map(makeStaff)\n          }\n        </section>\n        <section id=\"affiliates\" className=\"people-group\">\n          <h2>Affiliates</h2>\n          {data.people.group\n            .filter(g => g.fieldValue === 'Affiliates')\n            .map(makeAffiliates)\n          }\n        </section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PeopleQuery {\n    people: allAirtablePeople(\n      filter: {data: {group_type: {in: [\"Staff\", \"Affiliates\"]}}}\n      sort: {data: {name: ASC}}\n    ) {\n      group(field: {data: {group_type: SELECT}}) {\n        fieldValue\n        nodes {\n          data {\n            id\n            new_id\n            name\n            website\n            twitter\n            identities_as_current {\n              data {\n                id\n                title\n                department\n                institution\n              }\n            }\n            headshot {\n              localFiles {\n                childImageSharp {\n                  gatsbyImageData(\n                    width: 500\n                    height: 500\n                    transformOptions: {fit: COVER}\n                    backgroundColor: \"rgba(255,255,255,0)\"\n                  )\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n \nexport default PeoplePage"],"names":["_ref","data","makePerson","person","useWebsite","pageLocation","id","website","startsWith","img","headshot","localFiles","childImageSharp","el","React","GatsbyImage","image","gatsbyImageData","alt","name","imgStyle","objectFit","Link","key","new_id","to","className","persName","identities","identities_as_current","map","_identity","identity","department","title","Layout","SEO","people","group","filter","g","fieldValue","nodes","affiliates"],"sourceRoot":""}