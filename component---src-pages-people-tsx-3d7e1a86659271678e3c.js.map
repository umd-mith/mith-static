{"version":3,"file":"component---src-pages-people-tsx-3d7e1a86659271678e3c.js","mappings":"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","sources":["webpack://mith-static/./src/pages/people.tsx"],"sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport \"./people.css\"\n\ninterface PeopleProps {\n  data: Queries.PeopleQuery\n}\n\ntype Person = NonNullable<\n  Queries.PeopleQuery[\"people\"][\"group\"][number][\"nodes\"][number][\"data\"]\n>\n\nconst PeoplePage = ({ data }: PeopleProps) => {\n  function makePerson(person: Person, useWebsite = false) {\n    let pageLocation: string | null = person.id\n    if (useWebsite) {\n      if (person.website) {\n        pageLocation = person.website.startsWith(\"http\")\n          ? person.website\n          : `http://${person.website}`\n      } else {\n        pageLocation = null\n      }\n    }\n\n    let img: JSX.Element | undefined\n    if (person.headshot?.localFiles?.[0]?.childImageSharp) {\n      const el = (\n        <GatsbyImage\n          image={person.headshot.localFiles[0].childImageSharp.gatsbyImageData}\n          alt={`Headshot of ${person.name}`}\n          imgStyle={{\n            objectFit: \"cover\",\n          }}\n        />\n      )\n      img = pageLocation ? (\n        <Link\n          key={`p-${person.new_id}`}\n          id={person.new_id?.toString()}\n          to={pageLocation}\n          className=\"headshot\"\n        >\n          {el}\n        </Link>\n      ) : (\n        el\n      )\n    }\n\n    let persName = pageLocation ? (\n      <Link\n        key={`p-${person.new_id}`}\n        id={person.new_id?.toString()}\n        to={pageLocation}\n      >\n        {person.name}\n      </Link>\n    ) : (\n      person.name\n    )\n\n    let identities: JSX.Element[] | undefined\n    if (person.identities_as_current) {\n      identities = person.identities_as_current.map(_identity => {\n        const identity = _identity?.data!\n        return identity.department === \"MITH\" ||\n          identity.department ===\n            \"Maryland Institute for Technology in the Humanities\" ||\n          identity.department === null ? (\n          <div\n            className=\"identity\"\n            id={identity.id?.toString()}\n            key={`i-${identity.id}`}\n          >\n            <span className=\"title\">{identity.title}</span>\n          </div>\n        ) : (\n          <div\n            className=\"identity\"\n            id={identity.id?.toString()}\n            key={`i-${identity.id}`}\n          >\n            <span className=\"title\">{identity.title}</span>\n            <span className=\"department\">{identity.department}</span>\n          </div>\n        )\n      })\n    }\n\n    return (\n      <article\n        className=\"person\"\n        id={person.new_id?.toString()}\n        title={person.name || \"\"}\n        key={`p-${person.new_id}`}\n      >\n        {img}\n        <h3 className=\"name\">{persName}</h3>\n        {identities}\n      </article>\n    )\n  }\n\n  function makeStaff(\n    people: NonNullable<Queries.PeopleQuery[\"people\"][\"group\"]>[number],\n  ) {\n    return people.nodes.map(person => {\n      return makePerson(person.data!)\n    })\n  }\n\n  function makeAffiliates(\n    affiliates: NonNullable<Queries.PeopleQuery[\"people\"][\"group\"]>[number],\n  ) {\n    return affiliates.nodes.map(person => {\n      return makePerson(person.data!, true)\n    })\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"People\" />\n      <div className=\"page-people\">\n        <section className=\"leader hidden\">\n          <h1 className=\"page-title text-hidden\">People</h1>\n        </section>\n        <section id=\"facstaff\" className=\"people-group\">\n          <h2>Faculty &amp; Staff</h2>\n          {data.people.group\n            .filter(g => g.fieldValue === \"Staff\")\n            .map(makeStaff)}\n        </section>\n        <section className=\"pastpeople\"><h3 className=\"name\"><Link to=\"/people-past\">See past faculty and staff</Link></h3></section>\n        <section id=\"affiliates\" className=\"people-group\">\n          <h2>Affiliates</h2>\n          {data.people.group\n            .filter(g => g.fieldValue === \"Affiliates\")\n            .map(makeAffiliates)}\n        </section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query People {\n    people: allAirtablePeople(\n      filter: { data: { group_type: { in: [\"Staff\", \"Affiliates\"] } } }\n      sort: { data: { name: ASC } }\n    ) {\n      group(field: { data: { group_type: SELECT } }) {\n        fieldValue\n        nodes {\n          data {\n            id\n            new_id\n            name\n            website\n            twitter\n            identities_as_current {\n              data {\n                id\n                title\n                department\n                institution\n              }\n            }\n            headshot {\n              localFiles {\n                childImageSharp {\n                  gatsbyImageData(\n                    width: 500\n                    height: 500\n                    transformOptions: { fit: COVER }\n                    backgroundColor: \"rgba(255,255,255,0)\"\n                  )\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default PeoplePage\n\n"],"names":["_ref","data","makePerson","person","useWebsite","_person$headshot","_person$headshot$loca","_person$headshot$loca2","_person$new_id2","_person$new_id3","img","pageLocation","id","website","startsWith","headshot","localFiles","childImageSharp","_person$new_id","el","React","GatsbyImage","image","gatsbyImageData","alt","name","imgStyle","objectFit","Link","key","new_id","toString","to","className","identities","persName","identities_as_current","map","_identity","_identity$id","_identity$id2","identity","department","title","Layout","SEO","people","group","filter","g","fieldValue","nodes","affiliates"],"sourceRoot":""}